<?php
/**
 * @file
 * Removes cruft from forms.
 */

/**
 * Implements hook_menu_alter().
 *
 * Removes tabs from the log in and password pages.
 */
function borg_cleanup_menu_alter(&$items) {
  $items['user/login']['type'] = MENU_CALLBACK;
  $items['user/pasword']['type'] = MENU_CALLBACK;
  $items['node']['page callback'] = 'backdrop_not_found';
}

/**
 * Implements hook_admin_paths_alter().
 */
function borg_cleanup_admin_paths_alter(&$paths) {
  // Treat user edit pages as non-administrative.
  $paths['user/*/edit'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes useless description text from log in form, adds additional links.
 */
function borg_cleanup_form_user_login_alter(&$form, &$form_state) {
  $form['actions']['forgot'] = array(
    '#markup' => '<small>' . l(t('Forgot password?'), 'user/password') . '</small>',
    '#weight' => 10,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes useless description text from log in form, adds additional links.
 */
function borg_cleanup_form_user_pass_alter(&$form, &$form_state) {
  $form['actions']['forgot'] = array(
    '#markup' => '<small>' . l(t('Log in'), 'user/login') . '</small>',
    '#weight' => 10,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes useless description text.
 */
function borg_cleanup_form_user_register_form_alter(&$form, &$form_state) {
  $form['account']['mail']['#description'] = t('This e-mail address is not made public and will only be used if you request to receive a new password.');
  unset($form['account']['pass']['#description']);

  // Require the interest field on user registration form, even though it's not
  // required in general (for backward compatibility with accounts created prior
  // to this field).
  if (isset($form['field_interest'])) {
    $form['field_interest'][LANGUAGE_NONE]['#required'] = TRUE;
    $form['field_interest'][LANGUAGE_NONE][0]['#required'] = TRUE;
    $form['field_interest'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes useless description text.
 */
function borg_cleanup_form_user_profile_form_alter(&$form, &$form_state) {
  unset($form['account']['pass']['#description']);
  $form['account']['mail']['#description'] = str_replace('A valid e-mail address. All e-mails from the system will be sent to this address. ', '', $form['account']['mail']['#description']);
  $form['account']['mail']['#description'] = str_replace(' or wish to receive certain news or notifications by e-mail', '', $form['account']['mail']['#description']);

  $form['contact']['#title'] = t('Email Notifications');
  $form['contact']['field_security_mailing_list'] = $form['field_security_mailing_list'];
  unset($form['field_security_mailing_list']);

  if (isset($form['contact']['field_mailchimp_signup'])) {
    $form['contact']['field_mailchimp_signup'] = $form['field_mailchimp_signup'];
    unset($form['field_mailchimp_signup']);
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure our hook borg_cleanup_form_user_profile_form_alter() comes after
 * contact modules implementation so that we have access to the contact form.
 */
function borg_cleanup_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['borg_cleanup'])) {
    $group = $implementations['borg_cleanup'];
    unset($implementations['borg_cleanup']);
    $implementations['borg_cleanup'] = $group;
  }
}
