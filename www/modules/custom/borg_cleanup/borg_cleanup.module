<?php
/**
 * @file
 * Removes cruft from forms.
 */

/**
 * Implements hook_admin_paths_alter().
 */
function borg_cleanup_admin_paths_alter(&$paths) {
  // Treat user edit pages as non-administrative.
  $paths['user/*/edit'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes useless description text.
 */
function borg_cleanup_form_user_register_form_alter(&$form, &$form_state) {
  // Require the interest field on user registration form, even though it's not
  // required in general (for backward compatibility with accounts created prior
  // to this field).
  if (isset($form['field_interest'])) {
    $form['field_interest'][LANGUAGE_NONE]['#required'] = TRUE;
    $form['field_interest'][LANGUAGE_NONE][0]['#required'] = TRUE;
    $form['field_interest'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes useless description text.
 */
function borg_cleanup_form_user_profile_form_alter(&$form, &$form_state) {
  backdrop_add_js('core/misc/vertical-tabs.js');
  $account_fieldset = array(
    '#type'         => 'fieldset',
    '#title'        => t('Change Email or Password'),
    '#collapsible'  => true,
    '#collapsed'    => true,
    '#weight'       => -9,
  );

  $fields_for_account_fieldset = array('current_pass', 'mail', 'pass');
  foreach ($fields_for_account_fieldset as $field_name) {
    if (isset($form['account'][$field_name])) {
      $account_fieldset[$field_name] = $form['account'][$field_name];
      hide($form['account'][$field_name]);
    }
  }
  $form['account']['account_fieldset'] = $account_fieldset;

  $form['account']['#weight'] = 1;
  $form['account']['name']['#weight'] = -50;
  $form['field_name']['#weight'] = -51;

  $form['field_forhire']['#weight'] = 2;
  $form['field_services']['#weight'] = 3;
  $form['field_expertise']['#weight'] = 4;

  $form['field_bio']['#weight'] = 5;
  $form['field_photo']['#weight'] = 6;
  $form['field_header_photo']['#weight'] = 7;
  $form['field_gender']['#weight'] = 8;
  $form['field_gender'][LANGUAGE_NONE]['#options']['_none'] = t('- Not specified -');
  $form['field_industries']['#weight'] = 9;

  $social_fieldset = array(
    '#type'         => 'fieldset',
    '#title'        => t('Find me Online'),
    '#collapsible'  => true,
    '#collapsed'    => false,
    '#weight'       => 10,
  );

  $form['field_social']['#weight'] = 1;
  $form['field_irc']['#weight'] = 2;
  $form['field_websites']['#weight'] = 3;

  $fields_for_account_fieldset = array('field_irc', 'field_social', 'field_websites');
  foreach ($fields_for_account_fieldset as $field_name) {
    $social_fieldset[$field_name] = $form[$field_name];
    hide($form[$field_name]);
  }
  $form['social_fieldset'] = $social_fieldset;

  $form['field_contributions']['#weight'] = 11;
  $form['field_contributions_other']['#weight'] = 12;

  $form['contact']['#weight'] = 21;
  $form['timezone']['#weight'] = 22;
  $form['timezone']['#collapsed'] = TRUE;
  $form['redirect']['#weight'] = 23;

  unset($form['account']['pass']['#description']);
  $form['account']['mail']['#description'] = str_replace('A valid e-mail address. All e-mails from the system will be sent to this address. ', '', $form['account']['mail']['#description']);
  $form['account']['mail']['#description'] = str_replace(' or wish to receive certain news or notifications by e-mail', '', $form['account']['mail']['#description']);

  if (isset($form['contact']['field_mailchimp_signup'])) {
    $form['contact']['field_mailchimp_signup'] = $form['field_mailchimp_signup'];
    unset($form['field_mailchimp_signup']);
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure our hook borg_cleanup_form_user_profile_form_alter() comes after
 * contact modules implementation so that we have access to the contact form.
 */
function borg_cleanup_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['borg_cleanup'])) {
    $group = $implementations['borg_cleanup'];
    unset($implementations['borg_cleanup']);
    $implementations['borg_cleanup'] = $group;
  }
}

/**
 * Implements hook_form_external_mention_node_form_alter().
 *
 * Add requirement for quote author if quotes field is non-empty.
 */
function borg_cleanup_form_external_mention_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'borg_cleanup_form_external_mention_node_form_validate';
}

/**
 * Validation function for external mention node form.
 */
function borg_cleanup_form_external_mention_node_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['field_mention_quotes'][LANGUAGE_NONE][0]['value'])) {
    if (empty($form_state['values']['field_mention_quote_author'][LANGUAGE_NONE][0]['title'])) {
      form_set_error('field_mention_quote_author', t('If you provide one or more quotes, you must provide the quote author.'));
    }
  }
}
