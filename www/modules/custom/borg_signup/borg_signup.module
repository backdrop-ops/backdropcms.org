<?php
/**
 * @file
 * Newsletter signup block for backdropcms.org and *.backdropcms.org sites.
 */

/**
 * CiviCRM Group for the Newsletter
 */
define('BORG_SIGNUP_GROUP_NEWSLETTER', 5);

/**
 * Implements hook_block_info().
 */
function borg_signup_block_info() {
  $blocks['borg_signup'] = array(
    'info' => t('Newsletter Signup'),
    'description' => t('Signup block for the BackdropCMS Newsletter.'),
    'render last' => TRUE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function borg_signup_block_view($delta = '', $settings = array(), $contexts = array()) {
  $block = array();
  switch ($delta) {
    case 'borg_signup':
      $block['subject'] = NULL;
      $block['content'] = backdrop_get_form('borg_signup_newsletter_form');
      return $block;
  }
}

/**
 * Form for the Newsletter signup block.
 */
function borg_signup_newsletter_form($form, &$form_state) {
  $form[] = array(
    '#type' => 'help',
    '#markup' => t('Sign up for our Newsletter here. You can unsubscribe at any time using the link included in each mailing.'),
  );
  if (user_is_logged_in()) {
    global $user;
    $email = $user->mail;
  }
  $form['email'] = array(
    '#type' => 'email',
    '#title' => t('Email address'),
    '#default_value' => isset($email) ? $email : '',
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['signup'] = array(
    '#type' => 'submit',
    '#description' => t('Sign up for the BackdropCMS Newsletter.'),
    '#value' => t('Sign up'),
    '#submit' => array('borg_signup_newsletter_form_submit'),
  );

  return $form;
}

/**
 * Submission function for the Newsletter signup form.
 */
function borg_signup_newsletter_form_submit($form, &$form_state) {
  civicrm_initialize();
  $email = $form_state['values']['email'];

  // See if a contact already exists with this email address.
  $existing_emails = (array) civicrm_api4('Email', 'get', [
    'where' => [
      ['email', '=', $email],
      ['is_primary', '=', TRUE],
    ],
  ]);
  if (!empty($existing_emails)) {
    $contact_id = $existing_emails[0]['contact_id'];
  }
  else {
    // Create a new contact record with this email address as the name.
    $contacts = (array) civicrm_api4('Contact', 'create', [
      'values' => [
        'last_name' => $email,
        'source' => t('Newsletter signup'),
      ],
    ]);
    $contact_id = $contacts[0]['id'];
    $results = civicrm_api4('Email', 'create', [
      'values' => [
        'contact_id' => $contact_id,
        'email' => $email,
      ],
    ]);
  }

  // See if a GroupContact already exists for this contact and update if it
  // does, otherwise create a new GroupContact.
  $groupContacts = (array) civicrm_api4('GroupContact', 'get', [
    'where' => [
      ['contact_id', '=', $contact_id],
      ['group_id', '=', BORG_SIGNUP_GROUP_NEWSLETTER],
    ],
  ]);
  if (empty($groupContacts)) {
    // Create a new GroupContact adding the contact to the group.
    $results = civicrm_api4('GroupContact', 'create', [
      'values' => [
        'status' => 'Added',
        'contact_id' => $contact_id,
        'group_id' => BORG_SIGNUP_GROUP_NEWSLETTER,
      ],
    ]);
    backdrop_set_message(t('%email has been subscribed to the Newsletter.', array('%email' => $email)));
  }
  else {
    // There was already a GroupContact for this contact and group.
    if ($groupContacts[0]['status'] == 'Added') {
      backdrop_set_message(t('%email was already subscribed to the Newsletter.', array('%email' => $email)), 'warning');
    }
    else {
      // The GroupContact link exists, but the contact is not currently a member
      // of the group, so it must have been a member in the past.
      $results = civicrm_api4('GroupContact', 'update', [
        'values' => [
          'status' => 'Added',
        ],
        'where' => [
          ['contact_id', '=', $contact_id],
          ['group_id', '=', BORG_SIGNUP_GROUP_NEWSLETTER],
        ],
      ]);
      backdrop_set_message(t('%email has been re-subscribed to the Newsletter.', array('%email' => $email)));
    }
  }
}
