<?php

/**
 * @file borg_project_metrics.module
 * This module gets the download metrics for Backdrop Core and Contrib projects
 * from github.com.
 *
 * It also records some community metrics like commits to core and comments on
 * backdrop/backdrop-issues issues for display in the backdrop_project_metrics
 * block.
 */

/**
 * Get all the project_module, project_theme and project_layout nodes.
 */
function borg_project_metrics_get_project_nodes() {
  $types = array('project_module', 'project_theme', 'project_layout', 'core');
  $one_day_ago = time() - 3600 * 24;
  $result = db_query_range("SELECT nid FROM {node} WHERE type IN (:types) AND status = 1 AND changed < :one_day_ago ORDER BY changed ASC", 0, 200, array(
    ':types' => $types,
    ':one_day_ago' => $one_day_ago,
  ))->fetchAll();

  $project_modules = array();
  foreach($result as $r) {
    $nid = $r->nid;
    $node = node_load($r->nid);
    $github_path = $node->project['github_path'];
    $project_modules[] = array($github_path, $nid);
  }
  return $project_modules;
}

/**
 * Get the number of downloads for a project.
 *
 * @param string $project
 *   The project to retrieve the number of downloads for, i.e. webform or
 *   on_the_web.
 */
function borg_project_metrics_get_downloads($project = '') {
  global $settings;
  $nextUrl = "https://api.github.com/repos/$project/releases";
  $token = $settings['githubapi_token'];
  $authorization = 'Authorization: token ' . $token;
  $total = 0;

  do {
    // Initiate a curl session.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', $authorization));
    curl_setopt ($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)');
    curl_setopt($ch, CURLOPT_URL, $nextUrl);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
    curl_setopt($ch, CURLOPT_HEADER, 1);
    $content = curl_exec($ch);
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
    $header = substr($content, 0, $header_size);
    $body = substr($content, $header_size);
    curl_close($ch);
    $myHeader = explode("\n", $header);

    if (isset($myHeader[16])
      && strpos($myHeader[16], 'rel="next"') == TRUE
      && strpos($myHeader[16], 'rel="prev"') == FALSE) {

      $nextUrl = explode('rel="next"', $myHeader[16]);
      $nextUrl = $nextUrl[0];
      $nextUrl = explode('<', $nextUrl);
      $nextUrl = $nextUrl[1];
      $nextUrl = rtrim($nextUrl, '>; ');
    }
    elseif (isset($myHeader[16])
      && strpos($myHeader[16], 'rel="next"') == TRUE
      && strpos($myHeader[16], 'rel="prev"') == TRUE) {

      $nextUrl = explode('rel="next"', $myHeader[16]);
      $nextUrl = $nextUrl[0];
      $nextUrl = explode('rel="prev"', $nextUrl);
      $nextUrl = $nextUrl[1];
      $nextUrl = explode('<', $nextUrl);
      $nextUrl = $nextUrl[1];
      $nextUrl = rtrim($nextUrl, '>; ');
    }
    else {
      $nextUrl = NULL;
    }
    $json = json_decode($body, TRUE);
    if (!empty($json)) {
      foreach ($json as $j) {
        $total += isset($j['assets'][0]['download_count']) ? $j['assets'][0]['download_count'] : 0;
      }
    }
  }
  while ($nextUrl);

  return $total;
}

/**
 * Implements hook_cron().
 *
 * @see borg_project_metrics_get_project_nodes()
 * @see borg_project_metrics_get_downloads()
 */
function borg_project_metrics_cron() {
  // Only run once per hour at maximum.
  $cron_last = state_get('borg_project_metrics_cron', 0);
  $one_hour_passed = REQUEST_TIME - $cron_last > 3600;
  if (!$one_hour_passed) {
    return;
  }
  state_set('borg_project_metrics_cron', REQUEST_TIME);

  // Prevent overlap with weekly job.
  if (date('G') != 23) {
    $project_nodes = borg_project_metrics_get_project_nodes();
    foreach ($project_nodes as $m) {
      $num = borg_project_metrics_get_downloads($m[0]);
      if ($num) {
        try {
          $node = node_load($m[1]);
          $node->field_download_count['und'][0]['value'] = $num;
          $node->save();
        }
        catch(Exception $e) {
          $message = $e->getMessage();
          watchdog('borg_project_metrics', $message, array(), WATCHDOG_ERROR);
        }
      }
    }
  }

  // Get and store backdrop_project_metrics top level data weekly.
  if (date('G') == 23) {
    if (date('l') == 'Monday') {
      try {
        $commits = borg_project_metrics_get_display_metric_from_db('commits');
        $last_date = $commits['date'];
        borg_project_metrics_parse_metrics('commits', $last_date);
      }
      catch (Exception $e) {
        $message = $e->getMessage();
        watchdog('borg_project_metrics', $message, array(), WATCHDOG_ERROR);
      }
    }

    if (date('l') == 'Tuesday') {
      try {
        $last_date = borg_project_metrics_get_display_metric_from_db('comments')['date'];
        borg_project_metrics_parse_metrics('comments', $last_date);
      }
      catch (Exception $e) {
        $message = $e->getMessage();
        watchdog('borg_project_metrics', $message, array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Get the number of commits to Backdrop since 1 September 2013
 * (2013-09-01T05:23:28Z).
 *
 * @param string $type
 * String to indicate what metric to get: {users, commits, comments}.
 *
 * @param string $date_time
 * The date from DB borg_project_metrics table to set as since for the get.
 *
 * @return array $metrics
 * Returns an array of json objects each element is a paginated response from the
 * github api.
 *
 * @see borg_project_metrics_get_contrib_comments()
 */
function borg_project_metrics_get_metrics($type, $date_time = '2017-07-08 00:00:00') {
  global $settings;
  $token = $settings['githubapi_token'];
  $authorization = 'Authorization: token ' . $token;
  $metrics = [];
  $i = 1;
  $date_time = str_replace(' ', 'T', $date_time) . 'Z';
  do {
    if ($type == 'users') {
      $url = "https://api.github.com/repos/backdrop/backdrop/commits?since=$date_time&page=$i";
    }
    elseif ($type == 'commits') {
      $url = "https://api.github.com/repos/backdrop/backdrop/commits?since=$date_time&page=$i";
    }
    elseif ($type = 'comments') {
      $url = "https://api.github.com/repos/backdrop/backdrop-issues/issues/comments?since=$date_time&page=$i";
    }

    // Initiate a curl session.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', $authorization));
    curl_setopt ($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
    $datum = curl_exec($ch);
    $res_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    $json = json_decode($datum);

    // Only add to $metrics if the result is not empty.
    if (!empty($json)) {
      $metrics[$i] = $datum;
    }
    $i++;
  }
  while ($res_code == 200 && !empty($json));

  // If the $type is comments then we also want to get the contrib comments.
  if ($type == 'comments') {
    $project_nodes = borg_project_metrics_get_project_nodes();
    foreach ($project_nodes as $m) {
      $project = explode('/', $m[0]);
      $project = $project[1];
      if ($project != 'backdrop' && !empty($project)) {
        $project_comment_metrics = borg_project_metrics_get_contrib_comments($project, $date_time);
        if (!empty($project_comment_metrics)) {
          $metrics = array_merge($metrics, $project_comment_metrics);
        }
      }
    }
  }

  return $metrics;
}

/**
 * Helper function to parse data from githhub api borg_project_metrics_get_metrics()
 * request and store the parsed data in backdrop_project_metrics DB table.
 *
 * @param string $type
 * The type {users, commits, comments} of metric to parse.
 *
 * @see borg_project_metrics_get_display_metric_from_db()
 * @see borg_project_metrics_get_metrics()
 * @see borg_project_metrics_put_metrics_into_db()
 */
function borg_project_metrics_parse_metrics($type) {
  // Get the last recorded data for the metric.
  $metrics_data = borg_project_metrics_get_display_metric_from_db($type);

  // Get the current total so we can increment it.
  $metrics_total = $metrics_data['total_to_date'];

  // Get the last total_to_date date recorded.
  $last_date = $metrics_data['date'];

  // Query github API for $type since $last_date and count them.
  $results = borg_project_metrics_get_metrics($type, $last_date);

  $metrics_count = 0;
  foreach ($results as $r) {
    $paginated_metrics = json_decode($r);
    if (!empty($paginated_metrics)) {
      foreach ($paginated_metrics as $metric) {
        if (!empty($metric)) {
          $metrics_count++;
        }
      }
    }
  }

  // Get timestamp.
  date_default_timezone_set('UTC');
  $now = date('Y-m-d H:i:s');
  $total_to_date = $metrics_total + $metrics_count;

  // Record the metrics in the DB.
  borg_project_metrics_put_metrics_into_db($type, $now, $total_to_date);
}

/**
 * Implements hook_block_info().
 */
function borg_project_metrics_block_info() {
  $blocks['backdrop_project_metrics'] = array(
    'info' => t('Backdrop Project Metrics'),
    'description' => t('The number of users, commits, and comments to Backdrop since the project started.'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function borg_project_metrics_block_view($delta = '', $settings = array()) {
  $block = array();

  // Get the metrics.
  $commit_data = borg_project_metrics_get_display_metric_from_db('commits');
  $commits = number_format($commit_data['total_to_date']);

  $comment_data = borg_project_metrics_get_display_metric_from_db('comments');
  $comments = number_format($comment_data['total_to_date']);

  //$user_data = borg_project_metrics_get_display_metric_from_db('users');
  //$users = number_format($user_data['total_to_date']);
  $user_count = db_query("SELECT COUNT(uid) FROM {users} WHERE status = 1")->fetchField();
  $users = number_format($user_count);

  // Path to images directory.
  $images_path = backdrop_get_path('module', 'borg_project_metrics');

  // Block content.
  $metrics_content = <<<HTML
    <div class="row project-metrics">
      <div class="col-xs-4 comments-metric">
        <img class="comments-img" src="$images_path/images/fa-comments.png" />
        <p>
          <span class="comments-number"> $comments </span>
          <span class="comments-label"> comments </span>
        </p>
      </div>
      <div class="col-xs-4 commits-metric">
        <img class="commits-img" src="$images_path/images/fa-code-fork.png" />
        <p>
          <span class="commits-number"> $commits </span>
          <span class="commits-label"> commits </span>
        </p>
      </div>
      <div class="col-xs-4 users-metric">
        <img class="users-img" src="$images_path/images/fa-user.png" />
        <p>
          <span class="users-number"> $users </span>
          <span class="users-label"> community members </span>
        </p>
      </div>
    </div>
    <div class="row join-the-fun">
      <p>
        Join the fun!
        <img class="github-img" src="$images_path/images/fa-github.png" />
        <a href="https://github.com/backdrop/backdrop-issues/issues">
          backdrop/backdrop
        </a>
      </p>
    </div>
HTML;
  switch ($delta) {
    case 'backdrop_project_metrics':
      $block['subject'] = NULL;
      $block['content'] = $metrics_content;
      return $block;
      break;
  }
}

/**
 * Helper function to retrieve metric form DB for backdrop_project_metrics block.
 *
 * @param string $type
 * The type of metric to retrieve: {commits, comments, users}.
 *
 * @return array $metric
 * An array of the db fields of the most recent $type metric.
 */
function borg_project_metrics_get_display_metric_from_db($type) {
  $metric = db_select('borg_project_metrics', 'b')
    ->fields('b', array('total_to_date', 'date'))
    ->condition('type', $type)
    ->orderBy('date', 'desc')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

    return $metric;
}

/**
 * Helper function to write the metrics to the database.
 *
 * @param string $type
 * The $type: {users, commits, comments} to write to the DB.
 *
 * @param string $date
 * The date to record for the $type metric.
 *
 * @param int $total_to_date
 * The total to record for the $type metric.
 */
function borg_project_metrics_put_metrics_into_db($type, $date, $total_to_date) {
  db_insert('borg_project_metrics')
    ->fields(
      array(
        'type' => $type,
        'date' => $date,
        'total_to_date' => $total_to_date,
      )
    )
    ->execute();
}

/**
 * Helper function to get the comments from a
 * /backdrop-contrib/$project/issues/comments.
 *
 * @param string $project
 * The backdrop-contrib project to poll for comments.
 *
 * @param string $date
 * The since paramater for the github api in the url.
 *
 * @return array $project_comment_metrics
 * Returns an array of json objects each element is a paginated response from the
 * github api.
 */
function borg_project_metrics_get_contrib_comments($project, $date) {
  global $settings;
  $token = $settings['githubapi_token'];
  $authorization = 'Authorization: token ' . $token;
  $date = str_replace(' ', 'T', $date) . 'Z';
  $project_comment_metrics = [];
  $i = 1;
  do {
    $url = "https://api.github.com/repos/backdrop-contrib/$project/issues/comments?since=$date&page=$i";

    // Initiate a curl session.
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', $authorization));
    curl_setopt ($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
    $datum = curl_exec($ch);
    $res_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    $json = json_decode($datum);
    // Only save the metric if it is not empty.
    if (!empty($json) && $res_code == 200) {
      $project_comment_metrics[$i] = $datum;
    }
    $i++;
  } while ($res_code == 200 && !empty($json));

  return $project_comment_metrics;
}

/**
 * Get team members of a Backdrop Team; say the Bug Squad for example.
 *
 * @param string $team_id
 *   Defaults to the bug-squad team_id = 3489194.
 *
 * @return array
 *   An array of team members.
 */
function borg_project_metrics_teams($team_id = '3489194') {
  global $settings;
  $nextUrl = "https://api.github.com/teams/$team_id/members";
  $token = $settings['githubapi_token'];
  $authorization = 'Authorization: token ' . $token;

  // Initiate a curl session.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', $authorization));
  curl_setopt ($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)');
  curl_setopt($ch, CURLOPT_URL, $nextUrl);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
  curl_setopt($ch, CURLOPT_HEADER, 1);
  $content = curl_exec($ch);
  $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
  $header = substr($content, 0, $header_size);
  $body = substr($content, $header_size);
  curl_close($ch);
  $myHeader = explode("\n", $header);

  $data = json_decode($body);
  $members = array();
  foreach($data as $datum) {
    $name = borg_project_metrics_get_team_member_name($datum->login);
    $members[$datum->login] = [
      'name' => $name['name'],
      'avatar_url' => $name['avatar_url'],
    ];
  }

  return $members;
}

/**
 * Get the team members name via GitHub API.
 *
 * @param string $login
 *   The GitHub username.
 *
 * @return string
 *   The users Human Readable name.
 */
function borg_project_metrics_get_team_member_name($login) {
  global $settings;
  $nextUrl = "https://api.github.com/users/$login";
  $token = $settings['githubapi_token'];
  $authorization = 'Authorization: token ' . $token;

  // Initiate a curl session.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', $authorization));
  curl_setopt ($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)');
  curl_setopt($ch, CURLOPT_URL, $nextUrl);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
  curl_setopt($ch, CURLOPT_HEADER, 1);
  $content = curl_exec($ch);
  $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
  $header = substr($content, 0, $header_size);
  $body = substr($content, $header_size);
  curl_close($ch);
  $myHeader = explode("\n", $header);

  $data = json_decode($body);

  return array(
    'name' => $data->name,
    'avatar_url' => $data->avatar_url,
  );
}

/**
 * Get the usage count for Backdrop.
 */
function borg_project_metrics_get_backdrop_usage() {
  $count = db_select('project_usage_week_project', 'p')
    ->fields('p', array('count'))
    ->condition('nid', 179)
    ->orderBy('timestamp', 'DESC')
    ->execute()
    ->fetchAssoc();

  return $count['count'];
}

/**
 * Implements hook_preprocess_views_view().
 */
function borg_project_metrics_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Override the Showcase page title to display the usage count for Backdrop.
  if ($view->name == 'showcase' && $view->current_display == 'page') {
    $number = borg_project_metrics_get_backdrop_usage();
    // Round down to nearest hundred (for nicer-looking number).
    $number = floor($number / 100) * 100;

    $title = t('@number+ sites run on Backdrop CMS', array('@number' => number_format($number)));
    $view->set_title($title);
  }
}
