<?php
/**
 * @file
 * Integration between BackdropCMS.org and GitHub.
 */

/**
 * Implements hook_github_project_validate().
 */
function borg_github_github_project_validate(Node $project_node, array &$errors, array $payload) {
  $access_token = githubapi_get_token();

  // Project module will create the first type of project in the system, but
  // we have multiple project types on BackdropCMS.org (modules/themes/layouts).
  // So we have to check the contents of the repository to determine the type
  // of project it is that needs to be created. We do this by getting the
  // directory listing, finding the first non-test .info file, and reading
  // the "type" property from it.

  // Get the contents of the release.
  // See https://developer.github.com/v3/git/trees/#get-a-tree-recursively
  $tag = $payload['release']['tag_name'];
  $trees_url = str_replace('{/sha}', '/' . $tag, $payload['repository']['trees_url']) . '?recursive=1';

  $tree_result = backdrop_http_request($trees_url, array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  ));
  if ($tree_result->code == 200) {
    $data = json_decode($tree_result->data, TRUE);

    // Loop through all files to find the .info file closest to the root of the
    // repository. This helps avoid test or sub-module .info files.
    $lowest_directory = 10;
    foreach ($data['tree'] as $item) {
      if (strpos($item['path'], '.info') !== FALSE && strpos($item['path'], 'tests/') === FALSE) {
        $directory_count = substr_count($item['path'], '/');
        if ($directory_count < $lowest_directory) {
          $lowest_directory = $directory_count;
          $contents_url = str_replace('{+path}', $item['path'], $payload['repository']['contents_url']);
        }
      }
    }
  }
  else {
    $errors['github_error'] = t('The tree of the project could not be retrieved. Response: !response', array('!response' => print_r($tree_result, TRUE)));
    return;
  }

  if (!isset($contents_url)) {
    $errors['no_info_file'] = t('The project node could not be created on BackdropCMS.org because no .info file was found in the repository.');
    return;
  }

  // At this point we have found the .info file, but need its contents.
  $contents_result = backdrop_http_request($contents_url, array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  ));
  if ($contents_result->code == 200) {
    $data = json_decode($contents_result->data, TRUE);
    $info_contents = base64_decode($data['content']);
  }
  else {
    $errors['info_retrieval_failed'] = t('The info file of the project could not be retrieved. Response: !response', array('!response' => print_r($contents_result, TRUE)));
    return;
  }

  // Info file contents retrieved. Parse and check the "type" property.
  $info = backdrop_parse_info_format($info_contents);
  $allowed_types = array(
    'module' => 'project_module',
    'theme' => 'project_theme',
    'layout' => 'project_layout',
  );
  if (!isset($info['type'])) {
    $errors['no_type'] = t('The project node could not be created on BackdropCMS.org because no "type" property was specified in the project .info file. Info file contents: !contents', array('!contents' => print_r($info, TRUE)));
    return;
  }
  elseif (!array_key_exists($info['type'], $allowed_types)) {
    $errors['invalid_type'] = t('The project node could not be created on BackdropCMS.org because "type" property was "@value". Only values of @list are allowed.', array('@value' => $info['type'], '@list' => implode(array_keys($allowed_types))));
    return;
  }

  // Finally, we have an allowed project type from the .info file.
  $project_node->type = $allowed_types[$info['type']];

  // Update the title using the project title as well from the .info file.
  $project_node->title = $info['name'];

  // Set the text format to Filtered HTML. The default is whatever is used for
  // anonymous users, which currently is plain_text.
  $project_node->body[LANGUAGE_NONE][0]['format'] = 'filtered_html';

  // If this is a theme, attach the screenshot as the image.
  if ($project_node->type === 'project_theme') {
    // At this point we have found the .info file, but need its contents.
    $screenshot_url = str_replace('{+path}', 'screenshot.png', $payload['repository']['contents_url']);
    $contents_result = backdrop_http_request($screenshot_url, array(
      'headers' => array(
        'Authorization' => 'token ' . $access_token,
        'Accept' => 'application/vnd.github.v3.raw',
      ),
    ));
    if ($contents_result->code == 200) {
      $filename = file_munge_filename($payload['repository']['name'] . '.png', 'png');
      $uri = 'public://theme-screenshots/' . $filename;
      $file = file_save_data($contents_result->data, $uri);
      if ($file->uid !== $project_node->uid) {
        $file->uid = $project_node->uid;
        $file->save();
      }
      $project_node->field_image[LANGUAGE_NONE][0]['fid'] = $file->fid;
    }
  }

/* @todo
  if ($project_node->type === 'project_layout') {
    // Find the first screenshot in the project.
    // Copy & Save the file to the filesystem. See above.
    // Update the field_image field with the file ID. See above.
  }
*/
}

/**
 * Implements hook_project_github_create_package_alter().
 *
 * Modify the contents of the GitHub webhook payload.
 *
 * @param array $files
 *   An array representing the files in the payload directory after the payload
 *   has been unzipped, and the original zip file deleted, and before the new
 *   archive is created and resent to GitHub.
 * @param $project_name
 *   The name of the project.
 *
 * @return NULL
 *   No return value.
 */
function borg_github_project_github_create_package_alter(array &$files, $project_name) {
  $excluded_file_patterns = array(
    // Remove any screenshots used only on the project pages.
    '/\/screenshots\/.*/',

    // Remove files related to GitHub-specific functionality.
    '/\.github\/.*/',
    '/\.gitattributes/',

    // Remove CI files not needed in distributed projects.
    '/\.gitlc\.yml/',
    '/\.gitlab\/.*/',
    '/\.gitlab-ci\.yml/',
    '/\.travis\.yml/',
    '/\.tugboat\/.*/',
    '/\.zenci\.yml/',
  );

  foreach ($files as $path => $file) {
    foreach ($excluded_file_patterns as $pattern) {
      if (preg_match($pattern, $path)) {
        unset($files[$path]);
      }
    }
  }
}
