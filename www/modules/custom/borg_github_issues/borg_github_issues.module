<?php
/**
 * This module provides github API integration.
 *
 * @author Gor Martsen <gor@me.com>
 */

 define('BORG_GITHUB_ISSUES_REPO_FULLNAME', 'backdrop/backdrop-issues');
 define('BORG_GITHUB_ISSUES_CODE_OWNER_NAME', 'backdrop');
 define('BORG_GITHUB_ISSUES_CODE_REPO_NAME', 'backdrop');

/**
 * Implements hook_githubapi_payload().
 */
function borg_github_issues_githubapi_payload($event_name, $record, $repo){
  $payload = $record['data'];
  $expr = '/(?<!\S)#([0-9]*)/i';
  
  $code_owner_name = settings_get('borg_github_issues_code_owner_name');
  if(empty($code_owner_name)){
    $code_owner_name = BORG_GITHUB_ISSUES_CODE_OWNER_NAME;
  }

  $code_repo_name = settings_get('borg_github_issues_code_repo_name');
  if(empty($code_repo_name)){
    $code_repo_name = BORG_GITHUB_ISSUES_CODE_REPO_NAME;
  }

  $issues_repo_fullname = settings_get('borg_github_issues_repo_fullname');
  if(empty($issues_repo_fullname)){
    $issues_repo_fullname = BORG_GITHUB_ISSUES_REPO_FULLNAME;
  }

  
  if($repo['owner'] == $code_owner_name && $repo['name'] == $code_repo_name){
    switch ($event_name) {
      case 'push':
        foreach($payload['commits'] as $commit){
          $match = NULL;
          $message = '';
          preg_match_all($expr, $commit['message'], $match);
          if(!empty($match[1])){
            foreach($match[1] as $issue){
              $message .= $issues_repo_fullname . '#' . $issue . " ";
            }
            if(!empty($message)){
              borg_github_issues_commit_comment_add($commit['id'], $message, $repo);
            }
          }
        }
        break;
      case 'pull_request':
        if($payload['action'] == 'opened'){
          $message = '';
          preg_match_all($expr, $payload['pull_request']['title'] . ' ' . $payload['pull_request']['body'], $match);
          if(!empty($match[1])){
            foreach($match[1] as $issue){
              $message .= $issues_repo_fullname . '#' . $issue . " ";
            }
  
            if(!empty($message)){
              borg_github_issues_issue_comment_add($payload['number'], $message, $repo);
            }
          }
        }
        break;
      case 'issue_comment':
        if($payload['action'] == 'created'){
          preg_match_all($expr, $payload['comment']['body'], $match);
          if(!empty($match[1])){
            foreach($match[1] as $issue){
              $message .= $issues_repo_fullname . '#' . $issue . " ";
            }
            if(!empty($message)){
              borg_github_issues_issue_comment_add($payload['issue']['number'], $message, $repo);
            }
          }
        }  
        break;
    }
  }
}

function borg_github_issues_issue_comment_add($number, $message, $repo) {
  $githubapi = githubapi_get_class($repo);
  $settings = array(
    ':number' => $number,
    'body' => t('Related to: ') . $message,
  );
  $githubapi->createIssueComment($settings);
}


function borg_github_issues_commit_comment_add($sha, $message, $repo) {
  $githubapi = githubapi_get_class($repo);
  $settings = array(
    ':sha' => $sha,
    'body' => t('Related to: ') . $message,
  );
  $githubapi->createComment($settings);
}
