<?php
/**
 * @file
 * Conditionally Subscribe/Unsubscibe to BackdropCMS.org mailing list on
 * saving their account.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function borg_mailers_mailchimp_form_user_profile_form_alter(&$form, &$form_state) {
  $uid = $form['#user']->uid;
  $is_subcribed = db_query("SELECT mailchimp FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
  $default = $is_subcribed ? TRUE : FALSE;
  // Add a checkbox on the profile.
  $form['mailchimp_signup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sign up for our monthly newsletter'),
    '#default_value' => $default,
  );
  // Add a submit handler to save the data.
  $form['#submit'][] = 'borg_mailers_mailchimp_form_user_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes useless description text.
 */
function borg_mailers_mailchimp_form_user_register_form_alter(&$form, &$form_state) {
  // Add a checkbox on the profile.
  $form['mailchimp_signup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sign up for our monthly newsletter'),
    '#default_value' => TRUE,
  );
  // Add a submit handler to save the data.
  $form['#submit'][] = 'borg_mailers_mailchimp_form_user_form_submit';
}

/**
 * Submit handler for user profile form.
 * - Updates mailchimp value in DB
 */
function borg_mailers_mailchimp_form_user_form_submit(&$form, &$form_state) {
  dpm($form_state['values']['mailchimp_signup']);
  $uid = $form_state['user']->uid;
  $is_subcribed = db_query("SELECT mailchimp FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
  dvm($is_subcribed);
  dvm($form_state['values']['mailchimp_signup']);
  if ($is_subcribed != $form_state['values']['mailchimp_signup']) {
    dpm('different');
    if ($is_subcribed && $form_state['values']['mailchimp_signup'] === FALSE) {
      // Unsubscribe.
      db_query("UPDATE {users} SET mailchimp = 0 WHERE uid = :uid", array(':uid' => $uid));
    }
    elseif (!$is_subcribed && $form_state['values']['mailchimp_signup']) {
      // Subscribe.
      db_query("UPDATE {users} SET mailchimp = 1 WHERE uid = :uid", array(':uid' => $uid));
    }
  }
}

/**
 * Implements hook_user_load().
 * - Adds mailchimp_signup property to user object.
 */
function borg_mailers_mailchimp_user_load($users) {
  $result = db_query('SELECT mailchimp FROM {users} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->mailchimp_signup = $result->mailchimp;
  }
}

/**
 * Implements hook_user_update().
 *
 * @see _borg_mailers_mailchimp_user_update().
 */
function borg_mailers_mailchimp_user_update($account) {
  _borg_mailers_mailchimp_user_update($account);
}

/**
 * Implements hook_user_insert().
 *
 * @see _borg_mailers_mailchimp_user_update().
 */
function borg_mailers_mailchimp_user_insert($account) {
  _borg_mailers_mailchimp_user_update($account);
}

/**
 * Updates the user account.
 *
 * @see _borg_mailers_mailchimp_set_status().
 */
function _borg_mailers_mailchimp_user_update($account) {
  if ($account->mailchimp_signup == 1 && $account->original->mailchimp_signup == 0) {
    _borg_mailers_mailchimp_set_status($account, 'subscribed');
  }
  elseif ($account->mailchimp_signup == 0 && $account->original->mailchimp_signup['value'] == 1) {
    _borg_mailers_mailchimp_set_status($account, 'unsubscribed');
  }
}

/**
 * Signup for BackdropCMS.org Mailing list.
 *
 * @param User $account
 *   The user entity.
 *
 * @param string $status
 *   Set the user to subscribed or unsubscribed.
 *
 * @see _borg_mailers_mailchimp_check_existing_user().
 */
function _borg_mailers_mailchimp_set_status($account, $status = 'subscribed') {
  global $settings;
  $data = "{\"email_address\": \"$account->mail\", \"status\": \"$status\"}";
  $list = $settings['mailchimp_borg_list'];
  $subHash = md5(strtolower($account->mail));

  // Do an early API call to see if they are on the list already.
  $exists = _borg_mailers_mailchimp_check_existing_user($subHash);

  // Send curl POST reqeust to mailchimp to subscribe.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  if (isset($exists->id)) {
    curl_setopt(
      $ch,
      CURLOPT_URL,
      "https://us7.api.mailchimp.com/3.0/lists/$list/members/$subHash"
    );
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PATCH");
  }
  elseif ($status == 'subscribed') {
    curl_setopt(
      $ch,
      CURLOPT_URL,
      "https://us7.api.mailchimp.com/3.0/lists/$list/members/"
    );
    curl_setopt($ch, CURLOPT_POST, 1);
  }

  curl_setopt(
    $ch,
    CURLOPT_USERPWD,
    'devBorg' . ':' . $settings['mailchimp_key']
  );
  $headers = array();
  $headers[] = 'Content-Type: application/json';
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  $result = curl_exec($ch);
  if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
  }
  curl_close($ch);
}

/**
 * Helper function to check if the user exists in the MC list yet.
 *
 * @param string $subHash
 *   The subscribers hash on MC.
 *
 * @return Object
 *   The result of the MC GET request.
 */
function _borg_mailers_mailchimp_check_existing_user($subHash) {
  global $settings;
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt(
    $ch,
    CURLOPT_URL,
    "https://us7.api.mailchimp.com/3.0/lists/863d1bf27f/members/$subHash"
  );
  curl_setopt(
    $ch,
    CURLOPT_USERPWD,
    'devBorg' . ':' . $settings['mailchimp_key']
  );

  $headers = array();
  $headers[] = 'Content-Type: application/json';
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  $result = curl_exec($ch);
  if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
  }
  curl_close($ch);

  $res = json_decode($result);

  return $res;
}
