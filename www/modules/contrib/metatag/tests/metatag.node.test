<?php
/**
 * @file
 * Tests for the Metatag module and node entities.
 */

include_once __DIR__ . '/metatag.helper.test';

class MetatagCoreNodeTest extends MetatagTestHelper {

  /**
   * Tests creation of a standard entity.
   */
  public function testEntityCreationWorkflow() {
    $content_type = 'metatag_test';
    $content_type_path = str_replace('_', '-', $content_type);
    $label = 'Test';

    // Create a content type.
    $this->createContentType($content_type, $label);

    // Create an admin user and log them in.
    $perms = array(
      // Needed for the content type.
      'create ' . $content_type . ' content',
      'delete any ' . $content_type . ' content',
      'edit any ' . $content_type . ' content',

      // Used later for revision handling.
      'view revisions',
      'revert revisions',
      'delete revisions',

      // This permission is required in order to create new revisions.
      'administer nodes',
    );
    $this->adminUser = $this->createAdminUser($perms);
    $this->backdropLogin($this->adminUser);

    // Assign default values for the new content type.

    // Load the "add default configuration" page.
    $this->backdropGet('admin/config/metadata/metatags/config/add');
    $this->assertResponse(200);

    // Verify the page loaded correct.
    $this->assertText(t('Select the type of default meta tags you would like to add.'));

    // Submit the initial form to select an entity bundle.
    $this->backdropPost(NULL, array(
      'instance' => 'node:' . $content_type,
    ), t('Add and configure'));
    $this->assertResponse(200);

    // Verify the page loaded correct.
    $this->assertText('Node: ' . $label);

    // Submit the form with some values.
    $this->backdropPost(NULL, array(
      'metatags[und][abstract][value]' => '[node:title]',
    ), t('Save'));
    $this->assertResponse(200);

    // Verify the page loaded correct.
    $this->assertText(strip_tags(t('The meta tag defaults for @label have been saved.', array('@label' => 'Node: ' . $label))));

    // Verify that the user was redirected to the settings page again.
    $this->assertEqual($this->getUrl(), url('admin/config/metadata/metatags', array('absolute' => TRUE)));

    // Create test node.
    $node = $this->backdropCreateNode(array('type' => $content_type));
    $nid = $node->nid;

    // Create new metatags.
    $edit = array();
    $edit['metatags[und][abstract][value]'] = '[node:title] ponies';
    $edit['title'] = 'Who likes magic';
    $this->backdropPost('node/' . $nid . '/edit', $edit, t('Save'));

    // The meta tags that will be checked for.
    $expected = array(
      'und' => array(
        'abstract' => array(
          'value' => '[node:title] ponies',
        ),
      ),
    );

    $t_args = array('@type' => 'Test', '%title' => 'Who likes magic');
    $this->assertRaw(format_string('@type %title has been updated.', $t_args));

    // Verify the node data saved correctly.
    $node = node_load($nid);
    $this->verbose('<p>node_load(' . $nid . ')</p><pre>' . print_r($node, TRUE) . '</pre>');

    // Only the non-default values are stored.
    $this->assertEqual($expected, $node->metatags);

    // Confirm the APIs can load the data for this node.
    $metatags = metatag_metatags_load('node', $node->nid);
    $this->verbose('<p>metatag_metatags_load("node", ' . $node->nid . ')</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual($expected, $metatags);
    $metatags = metatag_metatags_load_multiple('node', array($node->nid));
    $this->verbose('<p>metatag_metatags_load_multiple("node", array(' . $node->nid . '))</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual(array($node->nid => array($node->vid => $expected)), $metatags);

    // Confirm the APIs can load the data for this node revision.
    $metatags = metatag_metatags_load('node', $node->nid, $node->vid);
    $this->verbose('<p>metatag_metatags_load("node", ' . $node->nid . ', ' . $node->vid . ')</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual($expected, $metatags);
    $metatags = metatag_metatags_load_multiple('node', array($node->nid), array($node->vid));
    $this->verbose('<p>metatag_metatags_load_multiple("node", array(' . $node->nid . '), array(' . $node->vid . '))</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual(array($node->nid => array($node->vid => $expected)), $metatags);

    // Verify the abstract is using the custom default for this content type.
    $this->backdropGet('node/' . $node->nid);
    $xpath = $this->xpath("//meta[@name='abstract']");
    $this->assertEqual(count($xpath), 1, 'Exactly one abstract meta tag found.');
    $this->assertEqual($xpath[0]['content'], 'Who likes magic ponies');

    // Core's canonical tag is a relative URL, whereas Metatag outputs an
    // absolute URL.
    $old_canonical = url('node/' . $node->nid);
    $new_canonical = url('node/' . $node->nid, array('absolute' => TRUE));

    // Confirm that the canonical tag is in the correct format.
    $xpath = $this->xpath("//link[@rel='canonical']");
    $this->assertEqual(count($xpath), 1, 'Exactly one canonical meta tag found.');
    $this->assertEqual($xpath[0]['href'], $new_canonical);
    $this->assertNotEqual($xpath[0]['href'], $old_canonical);

    // Confirm the canonical tag is also added as an HTTP header.
    $http_link_header = "<$new_canonical>; rel=\"canonical\"";
    $this->assertEqual($this->backdropGetHeader('Link'), $http_link_header, 'Canonical Link HTTP header set.');

    // Try loading the node revisions page.
    $this->backdropGet('node/' . $node->nid . '/revisions');
    // Verify the page did not load correctly. This is because the revisions
    // page can't be loaded if there's only one revision.
    $this->assertResponse(403);

    // Try creating a revision of the node.
    $old_title = $node->title;
    $old_vid = $node->vid;
    $new_title = 'Who still likes magic';
    // Load the node-edit page.
    $this->backdropGet('node/' . $node->nid . '/edit');
    // Verify the page loaded correctly.
    $this->assertResponse(200);
    // Try submitting text to the page.
    $args = array(
      'metatags[und][abstract][value]' => '[node:title] kittens',
      'title' => $new_title,
      'revision' => 1,
      'log' => 'Creating a new revision',
    );
    $this->backdropPost(NULL, $args, t('Save'));
    // Verify the page submission loaded correctly.
    $this->assertResponse(200);

    // A new version of the expected results
    $expected_updated = array(
      'und' => array(
        'abstract' => array(
          'value' => '[node:title] kittens',
        ),
      ),
    );

    $t_args = array('@type' => 'Test', '%title' => $new_title);
    $this->assertRaw(format_string('@type %title has been updated.', $t_args));

    // Verify the title is still using the custom default for this content type.
    $xpath = $this->xpath("//meta[@name='abstract']");
    $this->assertEqual(count($xpath), 1, 'Exactly one abstract meta tag found.');
    $this->assertNotEqual($xpath[0]['content'], $old_title . ' ponies', 'Did not find the new abstract meta tag.');
    $this->assertEqual($xpath[0]['content'], $new_title . ' kittens', 'Found the old abstract meta tag.');

    // Load the node revisions page.
    $this->backdropGet('node/' . $node->nid . '/revisions');
    // Verify the page loaded correctly.
    $this->assertResponse(200, 'Loaded the revisions page for this node.');

    // Confirm there are two revisions.
    $xpath = $this->xpath("//body//*[contains(@class, 'l-content')]//table//tbody//tr");
    $this->assertEqual(count($xpath), 2, 'There are two revisions of this node.');

    // Load the previous revision.
    $this->backdropGet('node/' . $node->nid . '/revisions/' . $old_vid . '/view');
    // Verify the page loaded correctly.
    $this->assertResponse(200, 'Loaded the original revision of this node.');
    $xpath = $this->xpath("//meta[@name='abstract']");
    $this->assertEqual(count($xpath), 1, 'Exactly one abstract meta tag found.');
    $this->assertNotEqual($xpath[0]['content'], $new_title . ' kittens', 'Did not find the new abstract meta tag.');
    $this->assertEqual($xpath[0]['content'], $old_title . ' ponies', 'Found the old abstract meta tag.');

    // Load the updated node; force-load it to make sure it's loaded properly.
    $updated_node = node_load($node->nid, NULL, TRUE);
    $updated_vid = $updated_node->vid;
    $this->verbose('<p>node_load(' . $node->nid . ', NULL, TRUE)</p><pre>' . print_r($updated_node, TRUE) . '</pre>');

    // Confirm the APIs can load the data for this node.
    $metatags = metatag_metatags_load('node', $updated_node->nid);
    $this->verbose('<p>metatag_metatags_load("node", ' . $updated_node->nid . ')</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual($expected_updated, $metatags);
    $this->assertNotEqual($expected, $metatags);
    // This one is complicated. If only the entity id is passed in it will load
    // the {metatag} records for *all* of the entity's revisions.
    $metatags = metatag_metatags_load_multiple('node', array($updated_node->nid));
    $this->verbose('<p>metatag_metatags_load_multiple("node", array(' . $updated_node->nid . '))</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual(array($updated_node->nid => array($node->vid => $expected, $updated_node->vid => $expected_updated)), $metatags);

    // Confirm the APIs can load the data for this node revision.
    $metatags = metatag_metatags_load('node', $updated_node->nid, $updated_vid);
    $this->verbose('<p>metatag_metatags_load("node", ' . $updated_node->nid . ', ' . $updated_node->vid . ')</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual($expected_updated, $metatags);
    $this->assertNotEqual($expected, $metatags);
    $metatags = metatag_metatags_load_multiple('node', array($updated_node->nid), array($updated_node->vid));
    $this->verbose('<p>metatag_metatags_load_multiple("node", array(' . $updated_node->nid . '), array(' . $updated_node->vid . '))</p><pre>' . print_r($metatags, TRUE) . '</pre>');
    $this->assertEqual(array($updated_node->nid => array($updated_node->vid => $expected_updated)), $metatags);

    // Load the current revision again.
    $this->backdropGet('node/' . $node->nid);
    $this->assertResponse(200, 'Loaded the current revision of this node.');
    $xpath = $this->xpath("//meta[@name='abstract']");
    $this->assertEqual(count($xpath), 1, 'Exactly one abstract meta tag found.');
    $this->assertNotEqual($xpath[0]['content'], $old_title . ' ponies', 'Did not find the old abstract meta tag.');
    $this->assertEqual($xpath[0]['content'], $new_title . ' kittens', 'Found the new abstract meta tag.');

    // Revert to the original revision.
    $this->backdropGet('node/' . $node->nid . '/revisions/' . $old_vid . '/revert');
    // Verify the page loaded correctly.
    $this->assertResponse(200, 'Loaded the form to revert to the original revision of this node.');
    // Try submitting the form.
    $this->backdropPost(NULL, array(), t('Revert'));
    // Verify the page submission loaded correctly.
    $this->assertResponse(200);
    // Confirm there are now three revisions.
    $xpath = $this->xpath("//body//*[contains(@class, 'l-content')]//table//tbody//tr");
    $this->assertEqual(count($xpath), 3, 'There are now three revisions of this node.');

    // Load the current revision, which will now have the old meta tags.
    $this->backdropGet('node/' . $node->nid);
    $this->assertResponse(200, 'Loaded the current revision of this node.');
    $xpath = $this->xpath("//meta[@name='abstract']");
    $this->assertEqual(count($xpath), 1, 'Exactly one abstract meta tag found.');
    $this->assertNotEqual($xpath[0]['content'], $new_title . ' kittens', 'Did not find the new abstract meta tag.');
    $this->assertEqual($xpath[0]['content'], $old_title . ' ponies', 'Found the old abstract meta tag again.');

    // Delete the original revision.
    $this->backdropGet('node/' . $node->nid . '/revisions/' . $old_vid . '/delete');
    // Verify the page loaded correctly.
    $this->assertResponse(200, 'Loaded the form to delete the original revision of this node.');
    // Try submitting the form.
    $this->backdropPost(NULL, array(), t('Delete'));
    // Verify the page submission loaded correctly.
    $this->assertResponse(200);
    // Confirm there are now two revisions again.
    $xpath = $this->xpath("//body//*[contains(@class, 'l-content')]//table//tbody//tr");
    $this->assertEqual(count($xpath), 2, 'There are two revisions of this node again.');

    // Load the current revision again to confirm that the page is still loading correctly.
    $this->backdropGet('node/' . $node->nid);
    $this->assertResponse(200, 'Loaded the current revision of this node again.');
    $xpath = $this->xpath("//meta[@name='abstract']");
    $this->assertEqual(count($xpath), 1, 'Exactly one abstract meta tag found.');
    $this->assertNotEqual($xpath[0]['content'], $new_title . ' kittens', 'Did not find the new abstract meta tag.');
    $this->assertEqual($xpath[0]['content'], $old_title . ' ponies', 'Found the old abstract meta tag again.');

    // Delete the second revision.
    $this->backdropGet('node/' . $node->nid . '/revisions/' . $updated_vid . '/delete');
    // Verify the page loaded correctly.
    $this->assertResponse(200, 'Loaded the form to delete the second revision of this node.');
    // Try submitting the form.
    $this->backdropPost(NULL, array(), t('Delete'));
    $this->assertResponse(200);
    // Verify that the revisions page no longer loads because there's only one
    // revision now.
    $this->backdropGet('node/' . $node->nid . '/revisions');
    $this->assertResponse(403, 'No longer able to load the node revisions page.');

    // Load the current revision again to confirm that the page is still loading correctly.
    $this->backdropGet('node/' . $node->nid);
    $this->assertResponse(200, 'Loaded the current revision of this node again.');
    $xpath = $this->xpath("//meta[@name='abstract']");
    $this->assertEqual(count($xpath), 1, 'Exactly one abstract meta tag found.');
    $this->assertNotEqual($xpath[0]['content'], $new_title . ' kittens', 'Did not find the new abstract meta tag.');
    $this->assertEqual($xpath[0]['content'], $old_title . ' ponies', 'Found the old abstract meta tag again.');
  }
}
