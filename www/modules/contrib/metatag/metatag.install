<?php
/**
 * @file
 * Install, update, and uninstall functions for the metatag module.
 */

/**
 * Implements hook_requirements().
 */
function metatag_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {
    // Complete data dump of all installed modules, used later.
    $module_data = system_rebuild_module_data();

    // Add a note if Page Title is also installed.
    if (module_exists('page_title')) {
      $requirements['metatag_page_title'] = array(
        'severity' => REQUIREMENT_WARNING,
        'title' => 'Metatag',
        'value' => $t('Page Title module should be removed'),
        'description' => $t('The Metatag module is able to customize page titles. Running the Page Title module simultaneously can lead to complications.'),
      );
    }

    // Check that Entity_Translation is current.
      // @todo update with backdrop version of entity translation.
    /*
    if (module_exists('entity_translation')
      && !empty($module_data['entity_translation'])
      && !empty($module_data['entity_translation']->schema_version)
      && $module_data['entity_translation']->schema_version < 7004) {
      $requirements['metatag_et_version'] = array(
        'severity' => REQUIREMENT_ERROR,
        'title' => 'Metatag',
        'value' => $t('<a href="@url">Entity_Translation</a> is out of date and requires updating', array('@url' => 'https://backdropcms.org/project/entity_translation')),
        'description' => $t('The Entity_Translation module is out of date and needs to be updated in order to be compatible with Metatag.'),
      );
    }
    */

    // It's recommended to install the Imagecache Token module to make image
    // tokens easier to do.
      // @todo update with backdrop version of imagecache token.
    /*
    if (!module_exists('imagecache_token')) {
      $requirements['metatag_imagecache_token'] = array(
        'severity' => REQUIREMENT_INFO,
        'title' => 'Metatag',
        'value' => $t('The Imagecache Token module is recommended.'),
        'description' => $t("It is recommended to install the <a href=\"@url\">Imagecache Token module</a> to make it easier to control image meta tags, e.g. og:image. See the Metatag module's README.txt for details.", array('@url' => 'https://backdrop.org/project/imagecache_token')),
      );
    }
    */

    // The Admin Language module can cause problems.
    if (module_exists('admin_language') && variable_get('admin_language_force_neutral', 0)) {
      $requirements['metatag_admin_language'] = array(
        'severity' => REQUIREMENT_WARNING,
        'title' => 'Metatag',
        'value' => $t('Conflict with Admin Language module.'),
        'description' => $t("Using the \"@option\" with Metatag can lead to data loss, so it is recommended to <a href=\"@url\">disable that option</a>.", array('@option' => t('Force language neutral aliases'), '@url' => url('admin/config/regional/language/admin_language'))),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function metatag_schema() {
  $schema['metatag'] = array(
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The entity type this data is attached to.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The entity id this data is attached to.',
      ),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The revision_id for the entity object this data is attached to.',
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language of the tag.',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'type_revision' => array(
        'entity_type',
        'revision_id',
      ),
    ),
    'primary key' => array(
      'entity_type',
      'entity_id',
      'revision_id',
      'language',
    ),
  );

  $schema['cache_metatag'] = backdrop_get_schema_unprocessed('system', 'cache');
  $schema['cache_metatag']['description'] = 'Cache table for the generated meta tag output.';

  return $schema;
}

/**
 * Implements hook_install().
 */
function metatag_install() {
  $config = config('metatag.settings');

  // Loop over all entity types.
  foreach (entity_get_info() as $entity_type => $entity_info) {

    // Always enable the node, taxonomy term and user entities.
    if (in_array($entity_type, array('node', 'taxonomy_term', 'user'))) {
      // Enable the main entity type.
      $config->set('metatag_enable_' . $entity_type, TRUE);

      // Enable each entity bundle too.
      $entity_info = entity_get_info($entity_type);
      if (!empty($entity_info['bundles'])) {
        foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          $config->set('metatag_enable_' . $entity_type . '__' . $bundle_name, TRUE);
        }
      }
    }
    else {
      // Configuration entities are skipped.
      if (isset($entity_info['configuration']) && $entity_info['configuration'] == TRUE) {
        continue;
      }
      // Entities must have bundles.
      if (empty($entity_info['bundles'])) {
        continue;
      }
      // Entities must be fieldable.
      elseif (empty($entity_info['fieldable'])) {
        continue;
      }

      // Ignore some view modes that are automatically added by certain modules.
      unset($entity_info['view modes']['ical']);
      unset($entity_info['view modes']['diff_standard']);
      unset($entity_info['view modes']['token']);

      // Entities without view modes are skipped.
      if (empty($entity_info['view modes'])) {
        continue;
      }

      // At this point, disable the entity by default.
      $entity_enabled = FALSE;
      // Anything that was specifically enabled via hook_entity_info() from older
      // versions will be enabled if not configured already.
      if (!empty($entity_info['metatag']) || !empty($entity_info['metatags'])) {
        $entity_enabled = $config->get('metatag_enable_' . $entity_type);
        if ($entity_enabled != FALSE) {
          $entity_enabled = TRUE;
        }
      }
      $config->set('metatag_enable_' . $entity_type, $entity_enabled);

      // Loop through the bundles, but only if the entity is enabled.
      if ($entity_enabled) {
        foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          // If it wasn't specifically disabled before, enable it.
          $bundle_enabled = $config->get('metatag_enable_' . $entity_type . '__' . $bundle_name);
          if ($bundle_enabled != FALSE) {
            $config->set('metatag_enable_' . $entity_type . '__' . $bundle_name, TRUE);
          }
        }
      }
    }
  }

  backdrop_set_message(t('Please visit the <a href="@url">Metatag settings page</a> to determine which types of content should allow meta tags.', array('@url' => url('admin/config/metadata/metatags/settings'))));
}

/**
 * Implements hook_uninstall().
 */
function metatag_uninstall() {
  variable_del('metatag_schema_installed');
  variable_del('metatag_cache_error_pages');
  variable_del('metatag_tag_admin_pages');
  variable_del('metatag_skip_update_7017');
  variable_del('metatag_has_revision_id');
  variable_del('metatag_entity_no_lang_default');
  variable_del('metatag_load_defaults');
  variable_del('metatag_cache_output');
  variable_del('metatag_pager_string');
  variable_del('metatag_i18n_translate_output');
  variable_del('metatag_i18n_enable_watchdog');
  variable_del('metatag_i18n_disabled');
  variable_del('metatag_leave_core_tags');
  variable_del('metatag_extended_permissions');
  variable_del('metatag_load_all_pages');
  variable_del('metatag_token_sanitize');

  // Remove all possible 'enable' variables.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    variable_del('metatag_enable_' . $entity_type);
    if (!empty($entity_info['bundles'])) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        variable_del('metatag_enable_' . $entity_type . '__' . $bundle_name);
      }
    }
  }
}

/**
 * Replace one meta tag with another in the entity records.
 *
 * @param array $sandbox
 *   A Batch API sandbox, passed by reference.
 * @param string $old_tag
 *   The meta tag that is to be replaced.
 * @param string $new_tag
 *   The meta tag that replaces the old one.
 */
function metatag_update_replace_meta_tag(&$sandbox, $old_tag, $new_tag) {
  if (!isset($sandbox['progress'])) {
    // Count of all {metatag} records that contained an entry for the old meta
    // tag.
    $records_count = db_select('metatag', 'm')
      ->condition('m.data', '%' . db_like('"" . $old_tag . ""') . '%', 'LIKE')
      ->countQuery()
      ->execute()
      ->fetchField();

    if (empty($records_count)) {
      return t('No Metatag entity records needed to have the "@tag" meta tag renamed.', array('@tag' => $old_tag));
    }

    $sandbox['max'] = $records_count;
    $sandbox['progress'] = 0;
  }

  // Count of rows that will be processed per iteration.
  $limit = 100;

  // Fetches a part of records.
  $records = db_select('metatag', 'm')
    ->fields('m', array())
    ->condition('m.data', '%' . db_like('"' . $old_tag . '"') . '%', 'LIKE')
    ->range(0, $limit)
    ->execute();

  $count = 0;
  $keys = array('entity_type', 'entity_id', 'revision_id', 'language');

  // Loop over the values and correct them.
  foreach ($records as $record) {
    $record->data = unserialize($record->data);

    if (isset($record->data[$old_tag])) {
      $record->data[$new_tag] = $record->data[$old_tag];
      unset($record->data[$old_tag]);
      backdrop_write_record('metatag', $record, $keys);

      // Clear the cache for the entity this belongs to.
      entity_get_controller($record->entity_type)->resetCache(array($record->entity_id));
    }

    $count++;
  }

  if (!empty($count)) {
    $sandbox['progress'] += $count;
    $sandbox['#finished'] = min(0.99, $sandbox['progress'] / $sandbox['max']);
  }
  else {
    $sandbox['#finished'] = 1;
    return t('Converted the "@old_tag" meta tag for @count entity records to "@new_tag" meta tag.', array('@old_tag' => $old_tag, '@new_tag' => $new_tag, '@count' => $sandbox['progress']));
  }
}

/**
 * Replace one meta tag with another in the configs.
 *
 * @param string $old_tag
 *   The meta tag that is to be replaced.
 * @param string $new_tag
 *   The meta tag that replaces the old one.
 *
 * @todo this has been rewritten for Backdrop, but still needs to be tested.
 */
function metatag_update_replace_config($old_tag, $new_tag) {
  // Find all instance records that contained an entry for the old meta tag.
  $configs = config_get_names_with_prefix('metatag.instance');
  foreach ($configs as $instance => $record) {
    if (!array_key_exists($old_tag, $record->config)) {
      unset($configs[$instance]);
    }
  }
  if (empty($configs)) {
    // This message will be returned if nothing needed to be updated.
    $none_message = t('No Metatag configuration records needed to have the "@tag" meta tag fixed. That said, there may be other configurations elsewhere that do need updating.', array('@tag' => $old_tag));
    backdrop_set_message($none_message);
  }
  else {
    $counter = 0;
    foreach ($configs as $record) {
      $record->config[$new_tag] = $record->config[$old_tag];
      unset($record->config[$old_tag]);
      $record->save();
      $counter++;
    }
    backdrop_set_message(t('Converted the "@old_tag" meta tag for @count configurations to the new "@new_tag" meta tag.', array('@old_tag' => $old_tag, '@new_tag' => $new_tag, '@count' => $counter)));
  }

  // Clear all Metatag caches.
  cache_clear_all('*', 'cache_metatag', TRUE);
  backdrop_static_reset('metatag_config_load_with_defaults');
  backdrop_static_reset('metatag_entity_supports_metatags');
  backdrop_static_reset('metatag_config_instance_info');
  backdrop_static_reset('metatag_get_info');
}

/**
 * Remove a specific meta tag from all configs.
 *
 * @param string $$tag_name
 *   The meta tag that is to be removed.
 *
 * @todo this has been rewritten for Backdrop, but still needs to be tested.
 */
function metatag_update_delete_config($tag_name) {
  // Find all instance records that contained an entry for the meta tag.
  $configs = config_get_names_with_prefix('metatag.instance');
  foreach ($configs as $instance => $record) {
    if (!array_key_exists($tag_name, $record->config)) {
      unset($configs[$instance]);
    }
  }
  if (empty($configs)) {
    // This message will be returned if nothing needed to be updated.
    $none_message = t('No Metatag configuration records needed to have the "@tag" meta tag removed.', array('@tag' => $tag_name));
    backdrop_set_message($none_message);
  }
  else {
    // Loop over the values and correct them.
    $counter = 0;
    foreach ($configs as $record) {
      unset($record->config[$tag_name]);
      $record->save();
      $counter++;
      backdrop_set_message(t('Removed the "@tag" meta tag for @count configurations.', array('@tag' => $tag_name, '@count' => $counter)));
    }
  }

  // Clear all Metatag caches.
  cache_clear_all('*', 'cache_metatag', TRUE);
  backdrop_static_reset('metatag_config_load_with_defaults');
  backdrop_static_reset('metatag_entity_supports_metatags');
  backdrop_static_reset('metatag_config_instance_info');
  backdrop_static_reset('metatag_get_info');
}

/**
 *  Implments hook_update_last_removed().
 */
function metatag_update_last_removed() {
  return '7110';
}

/**
 * Convert variables to configuration system.
 */
function metatag_update_1000() {
  // Remove variables not needed for Backdrop.
  update_variable_del('metatag_schema_installed');
  update_variable_del('metatag_skip_update_7017');
  update_variable_del('metatag_page_region');

  // Move old variables into new config.
  $settings = config('metatag.settings');
  $settings->set('cache_error_pages', update_variable_get('metatag_cache_error_pages', FALSE));
  $settings->set('tag_admin_pages', update_variable_get('metatag_tag_admin_pages', FALSE));
  $settings->set('has_revision_id', update_variable_get('metatag_has_revision_id', FALSE));
  $settings->set('entity_no_lang_default', update_variable_get('metatag_entity_no_lang_default', FALSE));
  $settings->set('load_defaults', update_variable_get('metatag_load_defaults', TRUE));
  $settings->set('cache_output', update_variable_get('metatag_cache_output', FALSE));
  $settings->set('pager_string', update_variable_get('metatag_pager_string', 'Page PAGER | '));
  $settings->set('i18n_translate_output', update_variable_get('metatag_i18n_translate_output', FALSE));
  $settings->set('i18n_enable_watchdog', update_variable_get('metatag_i18n_enable_watchdog', FALSE));
  $settings->set('i18n_disabled', update_variable_get('metatag_i18n_disabled', FALSE));
  $settings->set('leave_core_tags', update_variable_get('metatag_leave_core_tags', FALSE));
  $settings->set('extended_permissions', update_variable_get('metatag_extended_permissions', FALSE));
  $settings->set('load_all_pages', update_variable_get('metatag_load_all_pages', TRUE));
  $settings->set('token_sanitize', update_variable_get('metatag_token_sanitize', FALSE));

  // Replace all possible 'enable' variables.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    $settings->set('metatag_enable_' . $entity_type, update_variable_get('metatag_enable_' . $entity_type, TRUE));
    update_variable_del('metatag_enable_' . $entity_type);
    if (!empty($entity_info['bundles'])) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        $settings->set('metatag_enable_' . $entity_type . '__' . $bundle_name, update_variable_get('metatag_enable_' . $entity_type . '__' . $bundle_name, TRUE));
        update_variable_del('metatag_enable_' . $entity_type . '__' . $bundle_name);
      }
    }
  }

  $settings->save();

  // Copy all default config instances from the module.
  $default_instances = array('global', 'global.403', 'global.404', 'global.frontpage', 'node', 'user', 'taxonomy_term');
  foreach ($default_instances as $instance) {
    $file = 'metatag.instance.' . $instance;
    config_install_default_config('metatag', $file);
    // Disable here, will be enabled below if in use.
    config_set($file, 'disabled', TRUE);
  }

  // Move all config instances from the database into config.
  $records = db_select('metatag_config', 'm')
    ->fields('m', array('instance', 'config'))
    ->execute();

  foreach ($records as $record) {
    $instance = str_replace(':', '.', $record->instance);
    $record->config = unserialize($record->config);

    $config = config('metatag.instance.' . $instance);

    $config->set('module','metatag');
    $config->set('api_version', '1');
    $config->set('instance', $record->instance);
    $config->set('disabled', FALSE);
    $config->set('config', $record->config);
    if ($config->get('storage') == 'default') {
      $config->set('storage', 'overridden');
    }
    else {
      $config->set('storage','custom');
    }

    $config->save();
  }

  // Remove the old variables.
  update_variable_del('metatag_cache_error_pages');
  update_variable_del('metatag_tag_admin_pages');
  update_variable_del('metatag_has_revision_id');
  update_variable_del('metatag_entity_no_lang_default');
  update_variable_del('metatag_load_defaults');
  update_variable_del('metatag_cache_output');
  update_variable_del('metatag_pager_string');
  update_variable_del('metatag_i18n_translate_output');
  update_variable_del('metatag_i18n_enable_watchdog');
  update_variable_del('metatag_i18n_disabled');
  update_variable_del('metatag_leave_core_tags');
  update_variable_del('metatag_extended_permissions');
  update_variable_del('metatag_load_all_pages');
  update_variable_del('metatag_token_sanitize');

  // Clear all caches.
  cache_clear_all('*', 'cache_metatag', TRUE);
  backdrop_static_reset('metatag_config_load_with_defaults');
  backdrop_static_reset('metatag_entity_supports_metatags');
  backdrop_static_reset('metatag_config_instance_info');
  backdrop_static_reset('metatag_get_info');
}

/**
 * Disable output caching by default.
 */
function metatag_update_1001() {
  $settings = config('metatag.settings');
  $settings->set('cache_output', false);
  $settings->save();
}

/**
 * Clear all metatag output caches, it will be rebuilt if needed.
 */
function metatag_update_1002() {
  cache_clear_all('output:', 'cache_metatag', TRUE);
}

/**
 * Add a name and label attributes to all config instances.
 */
function metatag_update_1003() {
  $labels = array(
    'global' => 'Global',
    'global.frontpage' => 'Global: Home page',
    'global.403' => 'Global: 403 access denied',
    'global.404' => 'Global: 404 page not found',
    'node' => 'Content',
    'user' => 'User account',
    'taxonomy_term' => 'Taxonomy term',
  );
  $files = config_get_names_with_prefix('metatag.instance');
  $configs = config_load_multiple($files);
  foreach ($configs as $filename => $config) {
    $instance = $config['instance'];
    $name = str_replace(':', '.', $instance);
    config_set($filename, 'name', $name);
    if (isset($labels[$name])) {
      config_set($filename, 'label', $labels[$name]);
    }
  }
}

/**
 * Enable all metatags for existing sites.
 */
function metatag_update_1004() {
  $enabled_tags = array();
  $metatags = metatag_get_info(NULL, NULL, TRUE);
  foreach ($metatags['tags'] as $tag_name => $tag) {
    $enabled_tags[$tag_name] = $tag_name;
  }
  config_set('metatag.settings', 'enabled_tags', $enabled_tags);
}

/**
 * Add name and label attributes to any config instances that don't have one.
 */
function metatag_update_1005() {
  $files = config_get_names_with_prefix('metatag.instance');
  $configs = config_load_multiple($files);
  foreach ($configs as $filename => $config) {
    $instance = $config['instance'];
    if (!isset($config['name'])) {
      $name = str_replace(':', '.', $instance);
      config_set($filename, 'name', $name);
    }
    if (!isset($config['label'])) {
      config_set($filename, 'label', metatag_config_instance_label($instance));
    }
  }
}


/**
 * Clean up metatag_config table if it still exists.
 */
function metatag_update_1006() {
  // This table was converted to config in metatag_update_1000().
  if (db_table_exists('metatag_config')) {
    db_drop_table('metatag_config');
  }
}
