<?php
/**
 * @file
 * Adds the required Javascript to all your Backdrop pages to allow tracking by
 * the Google Analytics statistics package.
 */

/**
 * Define the default file extension list that should be tracked as download.
 */
define('GOOGLEANALYTICS_TRACKFILES_EXTENSIONS', '7z|aac|arc|arj|asf|asx|avi|bin|csv|doc(x|m)?|dot(x|m)?|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|msi|msp|pdf|phps|png|ppt(x|m)?|pot(x|m)?|pps(x|m)?|ppam|sld(x|m)?|thmx|qtm?|ra(m|r)?|sea|sit|tar|tgz|torrent|txt|wav|wma|wmv|wpd|xls(x|m|b)?|xlt(x|m)|xlam|xml|z|zip');

/**
 * Advertise the supported google analytics api details.
 */
function googleanalytics_api() {
  return array(
    'api' => 'analytics.js',
  );
}

/**
 * Implements hook_config_info().
 */
function googleanalytics_config_info() {
  $prefixes['googleanalytics.settings'] = array(
    'label' => t('Google Analytics Settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_theme().
 */
function googleanalytics_theme() {
  return array(
    'googleanalytics_admin_custom_var_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function googleanalytics_permission() {
  return array(
    'administer google analytics' => array(
      'title' => t('Administer Google Analytics'),
      'description' => t('Perform maintenance tasks for Google Analytics.'),
    ),
    'opt-in or out of tracking' => array(
      'title' => t('Opt-in or out of tracking'),
      'description' => t('Allow users to decide if tracking code will be added to pages or not.'),
    ),
    'use PHP for tracking visibility' => array(
      'title' => t('Use PHP for tracking visibility'),
      'description' => t('Enter PHP code in the field for tracking visibility settings.'),
      'restrict access' => TRUE,
    ),
    'add JS snippets for google analytics' => array(
      'title' => t('Add JavaScript snippets'),
      'description' => 'Enter JavaScript code snippets for advanced Google Analytics functionality.',
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function googleanalytics_menu() {
  $items['admin/config/system/googleanalytics'] = array(
    'title' => 'Google Analytics',
    'description' => 'Configure tracking behavior to get insights into your website traffic and marketing effectiveness.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('googleanalytics_admin_settings_form'),
    'access arguments' => array('administer google analytics'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'googleanalytics.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_preprocess_layout().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */
function googleanalytics_preprocess_layout() {
  global $base_path, $user;
  $config = config('googleanalytics.settings');

  $id = $config->get('account');

  // Get page status code for visibility filtering.
  $status = backdrop_get_http_header('Status');
  $trackable_status_codes = array(
    '403 Forbidden',
    '404 Not Found',
  );

  // 1. Check if the GA account number has a valid value.
  // 2. Track page views based on visibility value.
  // 3. Check if we should track the currently active user's role.
  // 4. Ignore pages visibility filter for 404 or 403 status codes.
  if (_google_analytics_valid_property_id($id) && (_googleanalytics_visibility_pages() || in_array($status, $trackable_status_codes)) && _googleanalytics_visibility_user($user)) {

    $id_list = array_filter(array_map("trim", explode(",", $id)));

    $debug = $config->get('debug');
    $url_custom = '';

    // Add link tracking.
    $link_settings = array('account' => $id_list);
    if ($track_outbound = $config->get('trackoutbound')) {
      $link_settings['trackOutbound'] = $track_outbound;
    }
    if ($track_mailto = $config->get('trackmailto')) {
      $link_settings['trackMailto'] = $track_mailto;
    }
    if (($track_download = $config->get('trackfiles')) && ($trackfiles_extensions = $config->get('trackfiles_extensions'))) {
      $link_settings['trackDownload'] = $track_download;
      $link_settings['trackDownloadExtensions'] = $trackfiles_extensions;
    }
    if (module_exists('colorbox') && ($track_colorbox = $config->get('trackcolorbox'))) {
      $link_settings['trackColorbox'] = $track_colorbox;
    }
    if ($track_domain_mode = $config->get('domain_mode')) {
      $link_settings['trackDomainMode'] = (int) $track_domain_mode;
    }
    if ($track_cross_domains = $config->get('cross_domains')) {
      $link_settings['trackCrossDomains'] = preg_split('/(\r\n?|\n)/', $track_cross_domains);
    }
    if ($track_url_fragments = $config->get('trackurlfragments')) {
      $link_settings['trackUrlFragments'] = $track_url_fragments;
      $url_custom = 'location.pathname + location.search + location.hash';
    }

    if (!empty($link_settings)) {
      backdrop_add_js(array('googleanalytics' => $link_settings), 'setting');

      // Add debugging code.
      if ($debug) {
        backdrop_add_js(backdrop_get_path('module', 'googleanalytics') . '/js/googleanalytics.debug.js');
      }
      else {
        backdrop_add_js(backdrop_get_path('module', 'googleanalytics') . '/js/googleanalytics.js');
      }
    }

    // Add messages tracking.
    $message_events = '';
    if ($message_types = $config->get('trackmessages')) {
      $message_types = array_values(array_filter($message_types));
      $status_heading = array(
        'status' => t('Status message'),
        'warning' => t('Warning message'),
        'error' => t('Error message'),
      );

      foreach (backdrop_get_messages(NULL, FALSE) as $type => $messages) {
        // Track only the selected message types.
        if (in_array($type, $message_types)) {
          foreach ($messages as $message) {
            // @todo: Track as exceptions?
            $event = array();
            $event['event_category'] = t('Messages');
            $event['event_label'] = strip_tags((string) $message);
            $message_events .= 'gtag("event", ' . backdrop_json_encode($status_heading[$type]) . ', ' . backdrop_json_encode($event) . ');';
            //$message_events .= 'ga("send", "event", ' . backdrop_json_encode(t('Messages')) . ', ' . backdrop_json_encode($status_heading[$type]) . ', ' . backdrop_json_encode(strip_tags($message)) . ');';
          }
        }
      }
    }

    // Site search tracking support.
    if (module_exists('search') && $config->get('site_search') && arg(0) == 'search' && $keys = googleanalytics_search_get_keys()) {
      // hook_preprocess_search_results() is not executed if search result is
      // empty. Make sure the counter is set to 0 if there are no results.
      $url_custom = '(window.googleanalytics_search_results) ? ' . backdrop_json_encode(url('search/' . arg(1), array('query' => array('search' => $keys)))) . ' : ' . backdrop_json_encode(url('search/' . arg(1), array('query' => array('search' => 'no-results:' . $keys, 'cat' => 'no-results'))));
    }

    // If this node is a translation of another node, pass the original
    // node instead.
    if (module_exists('translation') && $config->get('translation_set')) {
      // Check we have a node object, it supports translation, and its
      // translated node ID (tnid) doesn't match its own node ID.
      $node = menu_get_object();
      if ($node && translation_supported_type($node->type) && !empty($node->tnid) && ($node->tnid != $node->nid)) {
        $source_node = node_load($node->tnid);
        $languages = language_list();
        $url_custom = backdrop_json_encode(url('node/' . $source_node->nid, array('language' => $languages[$source_node->language])));
      }
    }

    // Track access denied (403) and file not found (404) pages.
    if ($status == '403 Forbidden') {
      // See https://www.google.com/support/analytics/bin/answer.py?answer=86927
      $url_custom = '"' . $base_path . '403.html?page=" + document.location.pathname + document.location.search + "&from=" + document.referrer';
    }
    elseif ($status == '404 Not Found') {
      $url_custom = '"' . $base_path . '404.html?page=" + document.location.pathname + document.location.search + "&from=" + document.referrer';
    }

    // #2693595: User has entered an invalid login and clicked on forgot
    // password link. This link contains the username or email address and may
    // get send to Google if we do not override it. Override only if 'name'
    // query param exists. Last custom url condition, this need to win.
    //
    // URLs to protect are:
    // - user/password?name=username
    // - user/password?name=foo@example.com
    if (arg(0) == 'user' && arg(1) == 'password' && array_key_exists('name', backdrop_get_query_parameters())) {
      $url_custom = '"' . $base_path . 'user/password"';
    }

    // Add custom dimensions and metrics.
    $custom_map = array();
    $custom_vars = array();
    foreach (array('dimension', 'metric') as $googleanalytics_custom_type) {
      $googleanalytics_custom_vars = $config->get('custom_' . $googleanalytics_custom_type);
      // Are there dimensions or metrics configured?
      if (!empty($googleanalytics_custom_vars)) {
        // Add all the configured variables to the content.
        foreach ($googleanalytics_custom_vars as $googleanalytics_custom_var) {
          // Replace tokens in values.
          $types = array();
          $node = menu_get_object();
          if (is_object($node)) {
            $types += array('node' => $node);
          }
          $googleanalytics_custom_var['value'] = token_replace($googleanalytics_custom_var['value'], $types, array('clear' => TRUE));

          // Suppress empty values.
          if (!backdrop_strlen(trim($googleanalytics_custom_var['value']))) {
            continue;
          }

          // Per documentation the max length of a dimension is 150 bytes.
          // A metric has no length limitation. It's not documented if this
          // limit means 150 bytes after url encoding or before.
          // See https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#customs
          if ($googleanalytics_custom_type == 'dimension' && backdrop_strlen($googleanalytics_custom_var['value']) > 150) {
            $googleanalytics_custom_var['value'] = substr($googleanalytics_custom_var['value'], 0, 150);
          }

          // Cast metric values for json_encode to data type numeric.
          if ($googleanalytics_custom_type == 'metric') {
            settype($googleanalytics_custom_var['value'], 'float');
          };

          // Build the arrays of values.
          $custom_map['custom_map'][$googleanalytics_custom_type . $googleanalytics_custom_var['index']] = $googleanalytics_custom_var['name'];
          $custom_vars[$googleanalytics_custom_var['name']] = $googleanalytics_custom_var['value'];
        }
      }
    }

    $custom_var = '';
    if (!empty($custom_map)) {
      // Add custom variables to tracker.
      foreach ($id_list as $id) {
        $custom_var .= 'gtag("config", ' . backdrop_json_encode($id) . ', ' . backdrop_json_encode($custom_map) . ');';
      }
      $custom_var .= 'gtag("event", "custom", ' . backdrop_json_encode($custom_vars) . ');';
    };
    
    // Build tracker code.
    $script = 'window.dataLayer = window.dataLayer || [];';
    $script .= 'function gtag(){dataLayer.push(arguments)};';
    $script .= 'gtag("js", new Date());';

    // Add any custom code snippets if specified.
    $codesnippet_create = $config->get('codesnippet_create');
    $codesnippet_before = $config->get('codesnippet_before');
    $codesnippet_after = $config->get('codesnippet_after');

    // Build the arguments fields list.
    // https://developers.google.com/analytics/devguides/collection/gtagjs/sending-data
    $create_only_fields = $codesnippet_create;

    // Domain tracking type.
    global $cookie_domain;
    $domain_mode = $config->get('domain_mode');
    $googleanalytics_adsense_script = '';

    // Per RFC 2109, cookie domains must contain at least one dot other than the
    // first. For hosts such as 'localhost' or IP Addresses we don't set a cookie domain.
    if ($domain_mode == 1 && count(explode('.', $cookie_domain)) > 2 && !is_numeric(str_replace('.', '', $cookie_domain))) {
      $create_only_fields = array_merge($create_only_fields, array('cookie_domain' => $cookie_domain));
      $googleanalytics_adsense_script .= 'window.google_analytics_domain_name = ' . backdrop_json_encode($cookie_domain) . ';';
    }
    elseif ($domain_mode == 2) {
      // Cross Domain tracking
      // https://developers.google.com/analytics/devguides/collection/gtagjs/cross-domain
      $create_only_fields['linker'] = array(
        'domains' => $link_settings['trackCrossDomains'],
      );
      $googleanalytics_adsense_script .= 'window.google_analytics_domain_name = "none";';
    }

    // Disable cookies.
    if ($config->get('disable_cookies')) {
      $create_only_fields['storage'] = 'none';
    }

    // Track logged in users across all devices.
    if ($config->get('trackuserid') && user_is_logged_in()) {
      $create_only_fields['user_id'] = google_analytics_user_id_hash($user->uid);
    }

    if (variable_get('googleanalytics_tracker_anonymizeip', 1)) {
      $create_only_fields['anonymize_ip'] = TRUE;
    }
    
    if (!empty($url_custom)) {
      $create_only_fields['page_path'] = 'PLACEHOLDER_URL_CUSTOM';
    }

    // Add enhanced link attribution after 'create', but before 'pageview' send.
    // @see https://developers.google.com/analytics/devguides/collection/gtagjs/enhanced-link-attribution
    if ($config->get('tracklinkid')) {
      $create_only_fields['link_attribution'] = TRUE;
    }

    // Add display features after 'create', but before 'pageview' send.
    // @see https://developers.google.com/analytics/devguides/collection/gtagjs/display-features
    if ($config->get('trackdoubleclick')) {
      $create_only_fields['allow_ad_personalization_signals'] = FALSE;
    }

    // Convert array to JSON format.
    $arguments_json = backdrop_json_encode($create_only_fields);
    // backdrop_json_encode() cannot convert every data type properly.
    $arguments_json = str_replace('"PLACEHOLDER_URL_CUSTOM"', $url_custom, $arguments_json);
    
    // Create a tracker.
    if (!empty($codesnippet_before)) {
      $script .= $codesnippet_before;
    }
    foreach ($id_list as $id) {
      $script .= 'gtag("config", ' . backdrop_json_encode($id) . ', ' . $arguments_json . ');';
    }

    // Prepare Adsense tracking.
    $googleanalytics_adsense_script .= 'window.google_analytics_uacct = ' . backdrop_json_encode($id_list[0]) . ';';
  
    if (!empty($custom_var)) {
      $script .= $custom_var;
    }
    if (!empty($message_events)) {
      $script .= $message_events;
    }
    if (!empty($codesnippet_after)) {
      $script .= $codesnippet_after;
    }

    if ($config->get('trackadsense')) {
      // Custom tracking. Prepend before all other JavaScript.
      // @TODO: https://support.google.com/adsense/answer/98142
      // sounds like it could be appended to $script.
      $script = $googleanalytics_adsense_script . $script;
    }

    // Prepend tracking library directly before script code.
    if ($debug) {
      // Debug script has highest priority to load.
      // @FIXME: Cannot find the debug URL!???
      $library = 'https://www.googletagmanager.com/gtag/js?id=' . $id_list[0];
    }
    elseif (variable_get('googleanalytics_cache', 0) && $url = _googleanalytics_cache('https://www.googletagmanager.com/gtag/js')) {
      // Should a local cached copy of gtag.js be used?
      $query_string = '?' . variable_get('css_js_query_string', '0');
      $library = $url . $query_string;
    }
    else {
      // Fallback to default.
      $library = 'https://www.googletagmanager.com/gtag/js?id=' . $id_list[0];
    }

    $options = array(
      'type' => 'external',
      'async' => TRUE,
    );
    backdrop_add_js($library, $options);
    backdrop_add_js($script, array('scope' => 'header', 'type' => 'inline', 'requires_jquery' => FALSE));
  }
}

/**
 * Generate user id hash to implement USER_ID.
 *
 * The USER_ID value should be a unique, persistent, and non-personally
 * identifiable string identifier that represents a user or signed-in
 * account across devices.
 *
 * @param int $uid
 *   User id.
 *
 * @return string
 *   User id hash.
 */
function google_analytics_user_id_hash($uid) {
  return backdrop_hmac_base64($uid, backdrop_get_private_key() . backdrop_get_hash_salt());
}

/**
 * Implements hook_field_extra_fields().
 */
function googleanalytics_field_extra_fields() {
  $extra['user']['user']['form']['googleanalytics'] = array(
    'label' => t('Google Analytics configuration'),
    'description' => t('Google Analytics module form element.'),
    'weight' => 3,
  );

  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Allow users to decide if tracking code will be added to pages or not.
 */
function googleanalytics_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $config = config('googleanalytics.settings');

  if (user_access('opt-in or out of tracking') && ($custom = $config->get('custom')) != 0 && _googleanalytics_visibility_roles($account)) {
    $form['googleanalytics'] = array(
      '#type' => 'fieldset',
      '#title' => t('Google Analytics configuration'),
      '#weight' => 3,
      '#collapsible' => TRUE,
      '#tree' => TRUE
    );

    switch ($custom) {
      case 1:
        $description = t('Users are tracked by default, but you are able to opt out.');
        break;

      case 2:
        $description = t('Users are <em>not</em> tracked by default, but you are able to opt in.');
        break;
    }

    // Disable tracking for visitors who have opted out from tracking via DNT (Do-Not-Track) header.
    $disabled = FALSE;
    if ($config->get('privacy_donottrack') && !empty($_SERVER['HTTP_DNT'])) {
      $disabled = TRUE;

      // Override settings value.
      $account->data['googleanalytics']['custom'] = FALSE;

      $description .= '<span class="admin-disabled">';
      $description .= ' ' . t('You have opted out from tracking via browser privacy settings.');
      $description .= '</span>';
    }

    $form['googleanalytics']['custom'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable user tracking'),
      '#description' => $description,
      '#default_value' => isset($account->data['googleanalytics']['custom']) ? $account->data['googleanalytics']['custom'] : ($custom == 1),
      '#disabled' => $disabled,
    );

    return $form;
  }
}

/**
 * Implements hook_user_presave().
 */
function googleanalytics_user_presave($account) {
  if (isset($account->googleanalytics['custom'])) {
    $account->data['googleanalytics']['custom'] = $account->googleanalytics['custom'];
  }
}

/**
 * Implements hook_cron().
 */
function googleanalytics_cron() {
  // Regenerate the tracking code file every day.
  if (REQUEST_TIME - state_get('googleanalytics_last_cache', 0) >= 86400 && config_get('googleanalytics.settings', 'cache')) {
    _googleanalytics_cache('https://www.google-analytics.com/analytics.js', TRUE);
    state_set('googleanalytics_last_cache', REQUEST_TIME);
  }
}

/**
 * Implements hook_preprocess_search_results().
 *
 * Collects and adds the number of search results to the head.
 */
function googleanalytics_preprocess_search_results(&$variables) {
  if (config_get('googleanalytics.settings', 'site_search')) {
    // There is no search result $variable available that hold the number of items
    // found. But the pager item mumber can tell the number of search results.
    global $pager_total_items;
    $results = isset($pager_total_items[0]) ? $pager_total_items[0] : 0;
    backdrop_add_js('window.googleanalytics_search_results = ' . intval($results) . ';', array('type' => 'inline', 'group' => JS_LIBRARY-1, 'requires_jquery' => FALSE));
  }
}

/**
 * Helper function for grabbing search keys. Function is missing in D7.
 *
 * https://api.drupal.org/api/function/search_get_keys/6
 */
function googleanalytics_search_get_keys() {
  static $return;
  if (!isset($return)) {
    // Extract keys as remainder of path
    // Note: support old GET format of searches for existing links.
    $path = explode('/', $_GET['q'], 3);
    $keys = empty($_REQUEST['keys']) ? '' : $_REQUEST['keys'];
    $return = count($path) == 3 ? $path[2] : $keys;
  }
  return $return;
}

/**
 * Download/Synchronize/Cache tracking code file locally.
 *
 * @param $location
 *   The full URL to the external javascript file.
 * @param $synchronize
 *   Synchronize to local cache if remote file has changed.
 * @return mixed
 *   The path to the local javascript file on success, boolean FALSE on failure.
 */
function _googleanalytics_cache($location, $synchronize = FALSE) {
  $path = 'public://googleanalytics';
  $file_destination = $path . '/' . basename($location);

  if (!file_exists($file_destination) || $synchronize) {
    // Download the latest tracking code.
    $result = backdrop_http_request($location);

    if ($result->code == 200) {
      if (file_exists($file_destination)) {
        // Synchronize tracking code and and replace local file if outdated.
        $data_hash_local = backdrop_hash_base64(file_get_contents($file_destination));
        $data_hash_remote = backdrop_hash_base64($result->data);
        // Check that the files directory is writable.
        if ($data_hash_local != $data_hash_remote && file_prepare_directory($path)) {
          // Save updated tracking code file to disk.
          file_unmanaged_save_data($result->data, $file_destination, FILE_EXISTS_REPLACE);
          // Based on Backdrop Core backdrop_build_css_cache().
          if (settings_get('css_gzip_compression', TRUE) && config_get('system.core', 'clean_url') && extension_loaded('zlib')) {
            file_unmanaged_save_data(gzencode($result->data, 9, FORCE_GZIP), $file_destination . '.gz', FILE_EXISTS_REPLACE);
          }
          watchdog('googleanalytics', 'Locally cached tracking code file has been updated.', array(), WATCHDOG_INFO);

          // Change query-strings on css/js files to enforce reload for all users.
          _backdrop_flush_css_js();
        }
      }
      else {
        // Check that the files directory is writable.
        if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
          // There is no need to flush JS here as core refreshes JS caches
          // automatically, if new files are added.
          file_unmanaged_save_data($result->data, $file_destination, FILE_EXISTS_REPLACE);
          // Based on Backdrop Core backdrop_build_css_cache().
          if (settings_get('css_gzip_compression', TRUE) && config_get('system.core', 'clean_url') && extension_loaded('zlib')) {
            file_unmanaged_save_data(gzencode($result->data, 9, FORCE_GZIP), $file_destination . '.gz', FILE_EXISTS_REPLACE);
          }
          watchdog('googleanalytics', 'Locally cached tracking code file has been saved.', array(), WATCHDOG_INFO);

          // Return the local JS file path.
          return file_create_url($file_destination);
        }
      }
    }
  }
  else {
    // Return the local JS file path.
    return file_create_url($file_destination);
  }
}

/**
 * Delete cached files and directory.
 */
function googleanalytics_clear_js_cache() {
  $path = 'public://googleanalytics';
  if (file_prepare_directory($path)) {
    file_scan_directory($path, '/.*/', array('callback' => 'file_unmanaged_delete'));
    backdrop_rmdir($path);

    // Change query-strings on css/js files to enforce reload for all users.
    _backdrop_flush_css_js();

    watchdog('googleanalytics', 'Local cache has been purged.', array(), WATCHDOG_INFO);
  }
}

/**
 * Tracking visibility check for an user object.
 *
 * @param $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if the current user is being tracked by Google Analytics,
 *   otherwise FALSE.
 */
function _googleanalytics_visibility_user($account) {

  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_googleanalytics_visibility_header($account) && _googleanalytics_visibility_roles($account)) {

    // Use the user's block visibility setting, if necessary.
    if (($custom = config_get('googleanalytics.settings', 'custom')) != 0) {
      if ($account->uid && isset($account->data['googleanalytics']['custom'])) {
        $enabled = $account->data['googleanalytics']['custom'];
      }
      else {
        $enabled = ($custom == 1);
      }
    }
    else {
      $enabled = TRUE;
    }

  }

  return $enabled;
}

/**
 * Based on visibility setting this function returns TRUE if GA code should
 * be added for the current role and otherwise FALSE.
 *
 * @param $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if GA code should be added for the current role and otherwise FALSE.
 */
function _googleanalytics_visibility_roles($account) {

  $config = config('googleanalytics.settings');
  $visibility = $config->get('visibility_roles');
  $enabled = $visibility;
  $roles = $config->get('roles');

  if (count($roles) > 0) {
    // One or more roles are selected.
    foreach ($account->roles as $role_name) {
      // Is the current user a member of one of these roles?
      if (in_array($role_name, $roles)) {
        // Current user is a member of a role that should be tracked/excluded from tracking.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Based on visibility setting this function returns TRUE if GA code should
 * be added to the current page and otherwise FALSE.
 */
function _googleanalytics_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $config = config('googleanalytics.settings');
    $visibility = $config->get('visibility_pages');
    $setting_pages = $config->get('pages');

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = backdrop_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Backdrop path to lowercase
        $path = backdrop_strtolower(backdrop_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = backdrop_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || backdrop_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Based on headers sent by clients this function returns TRUE if GA code should
 * be added to the current page and otherwise FALSE.
 */
function _googleanalytics_visibility_header($account) {
  $cache = config_get('system.core', 'cache');
  $donottrack = config_get('googleanalytics.settings', 'privacy_donottrack');

  if (($account->uid || $cache == 0) && $donottrack && !empty($_SERVER['HTTP_DNT'])) {
    // Disable tracking if caching is disabled, or if a visitor is logged in and
    // has opted out from tracking via DNT (Do-Not-Track) header.
    return FALSE;
  }

  return TRUE;
}

/**
 * Validate Google Analytics property IDs.
 *
 * @param string $property_id
 *   Property ID to validate.
 * @return int|bool
 *   Whether property ID is valid.
 */
function _google_analytics_valid_property_id($property_id) {
  $regex = '/^(?:(UA|G|AW|DC)-[\w-]+)(?:,\s*(?:(UA|G|AW|DC)-[\w-]+))*$/';
  return !empty($property_id) && preg_match($regex, $property_id);
}
