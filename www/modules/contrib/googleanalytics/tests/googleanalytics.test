<?php
/**
 * @file
 * Test file for Google Analytics module.
 */
class GoogleAnalyticsBasicTest extends BackdropWebTestCase {

  /**
   * User without permissions to edit snippets.
   *
   * @var \StdClass
   */
  protected $noSnippetUser;

  function setUp() {
    parent::setUp('googleanalytics');

    $permissions = array(
      'access administration pages',
      'administer google analytics',
      'administer modules',
      'administer site configuration',
      'access site reports',
    );

    // User to set up google_analytics.
    $this->noSnippetUser = $this->backdropCreateUser($permissions);
    $permissions[] = 'add JS snippets for google analytics';
    $this->admin_user = $this->backdropCreateUser($permissions);
    $this->backdropLogin($this->admin_user);
  }

  function testGoogleAnalyticsConfiguration() {
    // Check if Configure link is available on 'Modules' page.
    // Requires 'administer modules' permission.
    $this->backdropGet('admin/modules');
    $this->assertRaw('admin/config/system/googleanalytics', '[testGoogleAnalyticsConfiguration]: Configure link from Modules page to Google Analytics Settings page exists.');

    // Check if Configure link is available on 'Status Reports' page. NOTE: Link is only shown without UA code configured.
    // Requires 'administer site configuration' permission.
    $this->backdropGet('admin/reports/status');
    $this->assertRaw('admin/config/system/googleanalytics', '[testGoogleAnalyticsConfiguration]: Configure link from Status Reports page to Google Analytics Settings page exists.');

    // Check for setting page's presence.
    $this->backdropGet('admin/config/system/googleanalytics');
    $this->assertRaw(t('Web Property ID'), '[testGoogleAnalyticsConfiguration]: Settings page displayed.');

    // Check for account code validation.
    $edit['googleanalytics_account'] = $this->randomName(2);
    $this->backdropPost('admin/config/system/googleanalytics', $edit, t('Save configuration'));
    $this->assertRaw(t('A valid Google Analytics Web Property ID is case sensitive and formatted like UA-xxxxxxx-yy.'), '[testGoogleAnalyticsConfiguration]: Invalid Web Property ID number validated.');

    // User should have access to code snippets.
    $this->assertFieldByName('googleanalytics_codesnippet_create');
    $this->assertFieldByName('googleanalytics_codesnippet_before');
    $this->assertFieldByName('googleanalytics_codesnippet_after');
    $this->assertNoFieldByXPath("//textarea[@name='googleanalytics_codesnippet_create' and @disabled='disabled']", NULL, '"Create only fields" is enabled.');
    $this->assertNoFieldByXPath("//textarea[@name='googleanalytics_codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is enabled.');
    $this->assertNoFieldByXPath("//textarea[@name='googleanalytics_codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is enabled.');

    // Login as user without JS permissions.
    $this->backdropLogin($this->noSnippetUser);
    $this->backdropGet('admin/config/system/googleanalytics');

    // User should *not* have access to snippets, but create fields.
    $this->assertFieldByName('googleanalytics_codesnippet_create');
    $this->assertFieldByName('googleanalytics_codesnippet_before');
    $this->assertFieldByName('googleanalytics_codesnippet_after');
    $this->assertNoFieldByXPath("//textarea[@name='googleanalytics_codesnippet_create' and @disabled='disabled']", NULL, '"Create only fields" is enabled.');
    $this->assertFieldByXPath("//textarea[@name='googleanalytics_codesnippet_before' and @disabled='disabled']", NULL, '"Code snippet (before)" is disabled.');
    $this->assertFieldByXPath("//textarea[@name='googleanalytics_codesnippet_after' and @disabled='disabled']", NULL, '"Code snippet (after)" is disabled.');
  }

  function testGoogleAnalyticsPageVisibility() {
    // Verify that no tracking code is embedded into the webpage; if there is
    // only the module installed, but UA code not configured. See #2246991.
    $this->backdropGet('');
    $this->assertNoRaw('//www.google-analytics.com/analytics.js', '[testGoogleAnalyticsPageVisibility]: Tracking code is not displayed on admin subpage.');

    $ua_code = 'UA-123456-1';
    config_set('googleanalytics.settings', 'account', $ua_code);

    // Show tracking on "every page except the listed pages".
    config_set('googleanalytics.settings', 'visibility_pages', 0);
    // Disable tracking on "admin*" pages only.
    config_set('googleanalytics.settings', 'pages', "admin\nadmin/*");
    // Enable tracking only for authenticated users only.
    config_set('googleanalytics.settings', 'roles', array(BACKDROP_AUTHENTICATED_ROLE));

    // Check tracking code visibility.
    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsPageVisibility]: Tracking code is displayed for authenticated users.');

    // Test whether tracking code is not included on pages to omit.
    $this->backdropGet('admin');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsPageVisibility]: Tracking code is not displayed on admin page.');
    $this->backdropGet('admin/config/system/googleanalytics');
    // Checking for tracking code URI here, as $ua_code is displayed in the form.
    $this->assertNoRaw('https://www.google-analytics.com/analytics.js', '[testGoogleAnalyticsPageVisibility]: Tracking code is not displayed on admin subpage.');

    // Test whether tracking code display is properly flipped.
    config_set('googleanalytics.settings', 'visibility_pages', 1);
    $this->backdropGet('admin');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsPageVisibility]: Tracking code is displayed on admin page.');
    $this->backdropGet('admin/config/system/googleanalytics');

    // Checking for tracking code URI here, as $ua_code is displayed in the form.
    $this->assertRaw('https://www.google-analytics.com/analytics.js', '[testGoogleAnalyticsPageVisibility]: Tracking code is displayed on admin subpage.');
    $this->backdropGet('');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsPageVisibility]: Tracking code is NOT displayed on front page.');

    // Test whether tracking code is not display for anonymous.
    $this->backdropLogout();
    $this->backdropGet('');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsPageVisibility]: Tracking code is NOT displayed for anonymous.');

    // Switch back to every page except the listed pages.
    config_set('googleanalytics.settings', 'visibility_pages', 0);
    // Enable tracking code for all user roles.
    config_set('googleanalytics.settings', 'roles', array());

    $base_path = base_path();

    // Test whether 403 forbidden tracking code is shown if user has no access.
    $this->backdropGet('admin');
    $this->assertRaw($base_path . '403.html', '[testGoogleAnalyticsPageVisibility]: 403 Forbidden tracking code shown if user has no access.');

    // Test whether 404 not found tracking code is shown on non-existent pages.
    $this->backdropGet($this->randomName(64));
    $this->assertRaw($base_path . '404.html', '[testGoogleAnalyticsPageVisibility]: 404 Not Found tracking code shown on non-existent page.');

    // DNT Tests:
    config_set('googleanalytics.settings', 'privacy_donottrack', 1);
    // Enable system internal page cache for anonymous users.
    config_set('system.core', 'cache', 1);
    // DNT headers will fail to disable embedding of tracking code with cache set.
    $this->backdropGet('home', array(), array('DNT: 1'));
    $this->assertRaw('ga("send", "pageview");', '[testGoogleAnalyticsDNTVisibility]: DNT header sent from client, but page caching is enabled, so tracker cannot be removed.');
    // DNT works only with system internal page cache for anonymous users disabled.
    config_set('system.core', 'cache', 0);
    $this->backdropGet('');
    $this->assertRaw('ga("send", "pageview");', '[testGoogleAnalyticsDNTVisibility]: Tracking is enabled without DNT header.');
    // Test whether DNT header is able to remove the tracking code.
    $this->backdropGet('', array(), array('DNT: 1'));
    $this->assertNoRaw('ga("send", "pageview");', '[testGoogleAnalyticsDNTVisibility]: DNT header received from client. Tracking has been disabled by browser.');
    // Disable DNT feature and see if tracker is still embedded.
    config_set('googleanalytics.settings', 'privacy_donottrack', 0);
    $this->backdropGet('', array(), array('DNT: 1'));
    $this->assertRaw('ga("send", "pageview");', '[testGoogleAnalyticsDNTVisibility]: DNT feature is disabled, DNT header from browser has been ignored.');
  }

  function testGoogleAnalyticsTrackingCode() {
    $ua_code = 'UA-123456-2';
    config_set('googleanalytics.settings', 'account', $ua_code);

    // Show tracking code on every page except the listed pages.
    config_set('googleanalytics.settings', 'visibility_pages', 0);
    // Enable tracking code for all user roles.
    config_set('googleanalytics.settings', 'roles', array());

    /* Sample JS code as added to page:
    <script type="text/javascript" src="/sites/all/modules/google_analytics/googleanalytics.js?w"></script>
    <script>
    (function(q,u,i,c,k){window['GoogleAnalyticsObject']=q;
    window[q]=window[q]||function(){(window[q].q=window[q].q||[]).push(arguments)},
    window[q].l=1*new Date();c=i.createElement(u),k=i.getElementsByTagName(u)[0];
    c.async=true;c.src='https://www.google-analytics.com/analytics.js';
    k.parentNode.insertBefore(c,k)})('ga','script',document);
    ga('create', 'UA-123456-7');
    ga('send', 'pageview');
    </script>
    <!-- End Google Analytics -->
    */

    // Test whether tracking code uses latest JS.
    config_set('googleanalytics.settings', 'cache', 0);
    $this->backdropGet('');
    $this->assertRaw('https://www.google-analytics.com/analytics.js', '[testGoogleAnalyticsTrackingCode]: Latest tracking code used.');

    // Test whether anonymize visitors IP address feature has been enabled.
    config_set('googleanalytics.settings', 'tracker_anonymizeip', 0);
    $this->backdropGet('');
    $this->assertNoRaw('ga("set", "anonymizeIp", true);', '[testGoogleAnalyticsTrackingCode]: Anonymize visitors IP address not found on frontpage.');
    // Enable anonymizing of IP addresses.
    config_set('googleanalytics.settings', 'tracker_anonymizeip', 1);
    $this->backdropGet('');
    $this->assertRaw('ga("set", "anonymizeIp", true);', '[testGoogleAnalyticsTrackingCode]: Anonymize visitors IP address found on frontpage.');

    // Test if track Enhanced Link Attribution is enabled.
    config_set('googleanalytics.settings', 'tracklinkid', 1);
    $this->backdropGet('');
    $this->assertRaw('ga("require", "linkid", "linkid.js");', '[testGoogleAnalyticsTrackingCode]: Tracking code for Enhanced Link Attribution is enabled.');

    // Test if track Enhanced Link Attribution is disabled.
    config_set('googleanalytics.settings', 'tracklinkid', 0);
    $this->backdropGet('');
    $this->assertNoRaw('ga("require", "linkid", "linkid.js");', '[testGoogleAnalyticsTrackingCode]: Tracking code for Enhanced Link Attribution is not enabled.');

    // Test if tracking of User ID is enabled.
    config_set('googleanalytics.settings', 'trackuserid', 1);
    $this->backdropGet('');
    $this->assertRaw(', {"cookieDomain":"auto","userId":"', '[testGoogleAnalyticsTrackingCode]: Tracking code for User ID is enabled.');

    // Test if tracking of User ID is disabled.
    config_set('googleanalytics.settings', 'trackuserid', 0);
    $this->backdropGet('');
    $this->assertNoRaw(', {"cookieDomain":"auto","userId":"', '[testGoogleAnalyticsTrackingCode]: Tracking code for User ID is disabled.');

    // Test if tracking of url fragments is enabled.
    config_set('googleanalytics.settings', 'trackurlfragments', 1);
    $this->backdropGet('');
    $this->assertRaw('ga("set", "page", location.pathname + location.search + location.hash);', '[testGoogleAnalyticsTrackingCode]: Tracking code for url fragments is enabled.');

    // Test if tracking of url fragments is disabled.
    config_set('googleanalytics.settings', 'trackurlfragments', 0);
    $this->backdropGet('');
    $this->assertNoRaw('ga("set", "page", location.pathname + location.search + location.hash);', '[testGoogleAnalyticsTrackingCode]: Tracking code for url fragments is not enabled.');

    // Test if track display features is enabled.
    config_set('googleanalytics.settings', 'trackdoubleclick', 1);
    $this->backdropGet('');
    $this->assertRaw('ga("require", "displayfeatures");', '[testGoogleAnalyticsTrackingCode]: Tracking code for display features is enabled.');

    // Test if track display features is disabled.
    config_set('googleanalytics.settings', 'trackdoubleclick', 0);
    $this->backdropGet('');
    $this->assertNoRaw('ga("require", "displayfeatures");', '[testGoogleAnalyticsTrackingCode]: Tracking code for display features is not enabled.');

    // Test whether single domain tracking is active.
    $this->backdropGet('');
    $this->assertRaw('{"cookieDomain":"auto"}', '[testGoogleAnalyticsTrackingCode]: Single domain tracking is active.');

    // Enable "One domain with multiple subdomains".
    config_set('googleanalytics.settings', 'domain_mode', 1);
    $this->backdropGet('');

    // Test may run on localhost, an ipaddress or real domain name.
    // TODO: Workaround to run tests successfully. This feature cannot tested reliable.
    global $cookie_domain;
    if (count(explode('.', $cookie_domain)) > 2 && !is_numeric(str_replace('.', '', $cookie_domain))) {
      $this->assertRaw('{"cookieDomain":"' . $cookie_domain . '"}', '[testGoogleAnalyticsTrackingCode]: One domain with multiple subdomains is active on real host.');
    }
    else {
      // Special cases, Localhost and IP addresses don't show '_setDomainName'.
      $this->assertNoRaw('{"cookieDomain":"' . $cookie_domain . '"}', '[testGoogleAnalyticsTrackingCode]: One domain with multiple subdomains may be active on localhost (test result is not reliable).');
    }

    // Enable "Multiple top-level domains" tracking.
    config_set('googleanalytics.settings', 'domain_mode', 2);
    config_set('googleanalytics.settings', 'cross_domains', "www.example.com\nwww.example.net");
    $this->backdropGet('');
    $this->assertRaw('ga("create", "' . $ua_code . '", {"cookieDomain":"auto","allowLinker":true', '[testGoogleAnalyticsTrackingCode]: "allowLinker" has been found. Cross domain tracking is active.');
    $this->assertRaw('ga("require", "linker");', '[testGoogleAnalyticsTrackingCode]: Require linker has been found. Cross domain tracking is active.');
    $this->assertRaw('ga("linker:autoLink", ["www.example.com","www.example.net"]);', '[testGoogleAnalyticsTrackingCode]: "linker:autoLink" has been found. Cross domain tracking is active.');
    $this->assertRaw('"trackDomainMode":2,', '[testGoogleAnalyticsTrackingCode]: Domain mode value is of type integer.');
    $this->assertRaw('"trackCrossDomains":["www.example.com","www.example.net"]', '[testGoogleAnalyticsTrackingCode]: Cross domain tracking with www.example.com and www.example.net is active.');
    config_set('googleanalytics.settings', 'domain_mode', 0);

    // Test whether debugging script has been enabled.
    config_set('googleanalytics.settings', 'debug', 1);
    $this->backdropGet('');
    $this->assertRaw('https://www.google-analytics.com/analytics_debug.js', '[testGoogleAnalyticsTrackingCode]: Google debugging script has been enabled.');

    // Check if text and link is shown on 'Status Reports' page.
    // Requires 'administer site configuration' permission.
    $this->backdropGet('admin/reports/status');
    $this->assertRaw(t('Google Analytics module has debugging enabled. Please disable debugging setting in production sites from the <a href="@url">Google Analytics settings page</a>.', array('@url' => url('admin/config/system/googleanalytics'))), '[testGoogleAnalyticsConfiguration]: Debugging enabled is shown on Status Reports page.');

    // Test whether debugging script has been disabled.
    config_set('googleanalytics.settings', 'debug', 0);
    $this->backdropGet('');
    $this->assertRaw('https://www.google-analytics.com/analytics.js', '[testGoogleAnalyticsTrackingCode]: Google debugging script has been disabled.');

    // Test whether the CREATE and BEFORE and AFTER code is added to the tracker.
    $codesnippet_create = array(
      'cookieDomain' => 'foo.example.com',
      'cookieName' => 'myNewName',
      'cookieExpires' => 20000,
      'allowAnchor' => TRUE,
      'sampleRate' => 4.3,
    );
    config_set('googleanalytics.settings', 'codesnippet_create', $codesnippet_create);
    config_set('googleanalytics.settings', 'codesnippet_before', 'ga("set", "forceSSL", true);');
    config_set('googleanalytics.settings', 'codesnippet_after', 'ga("create", "UA-123456-3", {"name": "newTracker"});ga("newTracker.send", "pageview");');
    $this->backdropGet('');
    $this->assertRaw('ga("create", "' . $ua_code . '", {"cookieDomain":"foo.example.com","cookieName":"myNewName","cookieExpires":20000,"allowAnchor":true,"sampleRate":4.3});', '[testGoogleAnalyticsTrackingCode]: Create only fields have been found.');
    $this->assertRaw('ga("set", "forceSSL", true);', '[testGoogleAnalyticsTrackingCode]: Before codesnippet will force http pages to also send all beacons using https.');
    $this->assertRaw('ga("create", "UA-123456-3", {"name": "newTracker"});', '[testGoogleAnalyticsTrackingCode]: After codesnippet with "newTracker" tracker has been found.');
  }
}

class GoogleAnalyticsCustomDimensionsAndMetricsTest extends BackdropWebTestCase {
  function setUp() {
    parent::setUp('googleanalytics');

    $permissions = array(
      'access administration pages',
      'administer google analytics',
    );

    // User to set up google_analytics.
    $this->admin_user = $this->backdropCreateUser($permissions);
    $this->backdropLogin($this->admin_user);
  }

  function testGoogleAnalyticsCustomDimensions() {
    $ua_code = 'UA-123456-3';
    config_set('googleanalytics.settings', 'account', $ua_code);

    // Basic test if the feature works.
    $googleanalytics_custom_dimension = array(
      1 => array(
        'index' => 1,
        'value' => 'Bar 1',
      ),
      2 => array(
        'index' => 2,
        'value' => 'Bar 2',
      ),
      3 => array(
        'index' => 3,
        'value' => 'Bar 3',
      ),
      4 => array(
        'index' => 4,
        'value' => 'Bar 4',
      ),
      5 => array(
        'index' => 5,
        'value' => 'Bar 5',
      ),
    );
    config_set('googleanalytics.settings', 'custom_dimension', $googleanalytics_custom_dimension);
    $this->backdropGet('');

    foreach ($googleanalytics_custom_dimension as $dimension) {
      $this->assertRaw('ga("set", ' . backdrop_json_encode('dimension' . $dimension['index']) . ', ' . backdrop_json_encode($dimension['value']) . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Dimension #' . $dimension['index'] . ' is shown.');
    }

    // Test whether tokens are replaced in custom dimension values.
    $site_slogan = $this->randomName(16);
    config_set('system.core', 'site_slogan', $site_slogan);

    $googleanalytics_custom_dimension = array(
      1 => array(
        'index' => 1,
        'value' => 'Value: [site:slogan]',
      ),
      2 => array(
        'index' => 2,
        'value' => $this->randomName(16),
      ),
      3 => array(
        'index' => 3,
        'value' => '',
      ),
      // #2300701: Custom dimensions and custom metrics not outputed on zero value.
      4 => array(
        'index' => 4,
        'value' => '0',
      ),
    );
    config_set('googleanalytics.settings', 'custom_dimension', $googleanalytics_custom_dimension);
    $this->verbose('<pre>' . print_r($googleanalytics_custom_dimension, TRUE) . '</pre>');

    $this->backdropGet('');
    $this->assertRaw('ga("set", ' . backdrop_json_encode('dimension1') . ', ' . backdrop_json_encode("Value: $site_slogan") . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Tokens have been replaced in dimension value.');
    $this->assertRaw('ga("set", ' . backdrop_json_encode('dimension2') . ', ' . backdrop_json_encode($googleanalytics_custom_dimension['2']['value']) . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Random value is shown.');
    $this->assertNoRaw('ga("set", ' . backdrop_json_encode('dimension3') . ', ' . backdrop_json_encode('') . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Empty value is not shown.');
    $this->assertRaw('ga("set", ' . backdrop_json_encode('dimension4') . ', ' . backdrop_json_encode('0') . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Value 0 is shown.');
  }

  function testGoogleAnalyticsCustomMetrics() {
    $ua_code = 'UA-123456-3';
    config_set('googleanalytics.settings', 'account', $ua_code);

    // Basic test if the feature works.
    $googleanalytics_custom_metric = array(
      1 => array(
        'index' => 1,
        'value' => '6',
      ),
      2 => array(
        'index' => 2,
        'value' => '8000',
      ),
      3 => array(
        'index' => 3,
        'value' => '7.8654',
      ),
      4 => array(
        'index' => 4,
        'value' => '1123.4',
      ),
      5 => array(
        'index' => 5,
        'value' => '5,67',
      ),
    );

    config_set('googleanalytics.settings', 'custom_metric', $googleanalytics_custom_metric);
    $this->backdropGet('');

    foreach ($googleanalytics_custom_metric as $metric) {
      $this->assertRaw('ga("set", ' . backdrop_json_encode('metric' . $metric['index']) . ', ' . backdrop_json_encode((float) $metric['value']) . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Metric #' . $metric['index'] . ' is shown.');
    }

    // Test whether tokens are replaced in custom metric values.
    $googleanalytics_custom_metric = array(
      1 => array(
        'index' => 1,
        'value' => '[current-user:roles:count]',
      ),
      2 => array(
        'index' => 2,
        'value' => mt_rand(),
      ),
      3 => array(
        'index' => 3,
        'value' => '',
      ),
      // #2300701: Custom dimensions and custom metrics not outputed on zero value.
      4 => array(
        'index' => 4,
        'value' => '0',
      ),
    );
    config_set('googleanalytics.settings', 'custom_metric', $googleanalytics_custom_metric);
    $this->verbose('<pre>' . print_r($googleanalytics_custom_metric, TRUE) . '</pre>');

    $this->backdropGet('');
    $this->assertRaw('ga("set", ' . backdrop_json_encode('metric1') . ', ', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Tokens have been replaced in metric value.');
    $this->assertRaw('ga("set", ' . backdrop_json_encode('metric2') . ', ' . backdrop_json_encode($googleanalytics_custom_metric['2']['value']) . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Random value is shown.');
    $this->assertNoRaw('ga("set", ' . backdrop_json_encode('metric3') . ', ' . backdrop_json_encode('') . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Empty value is not shown.');
    $this->assertRaw('ga("set", ' . backdrop_json_encode('metric4') . ', ' . backdrop_json_encode(0) . ');', '[testGoogleAnalyticsCustomDimensionsAndMetrics]: Value 0 is shown.');
  }

  /**
   * Tests if Custom Dimensions token form validation works.
   */
  public function testGoogleAnalyticsCustomDimensionsTokenFormValidation() {
    $ua_code = 'UA-123456-1';

    // Check form validation.
    $edit['googleanalytics_account'] = $ua_code;
    $edit['googleanalytics_custom_dimension[indexes][1][value]'] = '[current-user:name]';
    $edit['googleanalytics_custom_dimension[indexes][2][value]'] = '[current-user:edit-url]';
    $edit['googleanalytics_custom_dimension[indexes][3][value]'] = '[user:name]';
    $edit['googleanalytics_custom_dimension[indexes][4][value]'] = '[term:name]';
    $edit['googleanalytics_custom_dimension[indexes][5][value]'] = '[term:tid]';

    $this->backdropPost('admin/config/system/googleanalytics', $edit, t('Save configuration'));

    $this->assertRaw(t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', array('%element-title' => t('Custom dimension value #@index', array('@index' => 1)), '@invalid-tokens' => implode(', ', array('[current-user:name]')))));
    $this->assertRaw(t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', array('%element-title' => t('Custom dimension value #@index', array('@index' => 2)), '@invalid-tokens' => implode(', ', array('[current-user:edit-url]')))));
    $this->assertRaw(t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', array('%element-title' => t('Custom dimension value #@index', array('@index' => 3)), '@invalid-tokens' => implode(', ', array('[user:name]')))));
    // BUG #2037595
    //$this->assertNoRaw(t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', array('%element-title' => t('Custom dimension value #@index', array('@index' => 4)), '@invalid-tokens' => implode(', ', array('[term:name]')))));
    //$this->assertNoRaw(t('The %element-title is using the following forbidden tokens with personal identifying information: @invalid-tokens.', array('%element-title' => t('Custom dimension value #@index', array('@index' => 5)), '@invalid-tokens' => implode(', ', array('[term:tid]')))));
  }
}

/**
 * Test custom url functionality of Google Analytics module.
 */
class GoogleAnalyticsCustomUrls extends BackdropWebTestCase {

  function setUp() {
    parent::setUp('googleanalytics');

    $permissions = array(
      'access administration pages',
      'administer google analytics',
    );

    // User to set up google_analytics.
    $this->admin_user = $this->backdropCreateUser($permissions);
  }

  /**
   * Tests if user password page urls are overridden.
   */
  public function testGoogleAnalyticsUserPasswordPage() {
    $base_path = base_path();
    $ua_code = 'UA-123456-4';
    config_set('googleanalytics.settings', 'account', $ua_code);

    $this->backdropGet('user/password', array('query' => array('name' => 'foo')));
    $this->assertRaw('ga("set", "page", "' . $base_path . 'user/password"');

    $this->backdropGet('user/password', array('query' => array('name' => 'foo@example.com')));
    $this->assertRaw('ga("set", "page", "' . $base_path . 'user/password"');

    $this->backdropGet('user/password');
    $this->assertNoRaw('ga("set", "page",', '[testGoogleAnalyticsCustomUrls]: Custom url not set.');
  }
}

class GoogleAnalyticsStatusMessagesTest extends BackdropWebTestCase {

  function setUp() {
    parent::setUp('googleanalytics');

    $permissions = array(
      'access administration pages',
      'administer google analytics',
    );

    // User to set up google_analytics.
    $this->admin_user = $this->backdropCreateUser($permissions);
  }

  function testGoogleAnalyticsStatusMessages() {
    $ua_code = 'UA-123456-4';
    config_set('googleanalytics.settings', 'account', $ua_code);

    // Enable logging of errors only.
    config_set('googleanalytics.settings', 'trackmessages', array('error' => 'error'));

    $this->backdropPost('user/login', array(), t('Log in'));
    $this->assertRaw('ga("send", "event", "Messages", "Error message", "Username or email field is required.");', '[testGoogleAnalyticsStatusMessages]: Event message "Username field is required." is shown.');
    $this->assertRaw('ga("send", "event", "Messages", "Error message", "Password field is required.");', '[testGoogleAnalyticsStatusMessages]: Event message "Password field is required." is shown.');

    // @todo: investigate why backdrop_set_message() fails.
    //backdrop_set_message('Example status message.', 'status');
    //backdrop_set_message('Example warning message.', 'warning');
    //backdrop_set_message('Example error message.', 'error');
    //backdrop_set_message('Example error <em>message</em> with html tags and <a href="https://example.com/">link</a>.', 'error');
    //$this->backdropGet('');
    //$this->assertNoRaw('ga("send", "event", "Messages", "Status message", "Example status message.");', '[testGoogleAnalyticsStatusMessages]: Example status message is not enabled for tracking.');
    //$this->assertNoRaw('ga("send", "event", "Messages", "Warning message", "Example warning message.");', '[testGoogleAnalyticsStatusMessages]: Example warning message is not enabled for tracking.');
    //$this->assertRaw('ga("send", "event", "Messages", "Error message", "Example error message.");', '[testGoogleAnalyticsStatusMessages]: Example error message is shown.');
    //$this->assertRaw('ga("send", "event", "Messages", "Error message", "Example error message with html tags and link.");', '[testGoogleAnalyticsStatusMessages]: HTML has been stripped successful from Example error message with html tags and link.');
  }
}

class GoogleAnalyticsRolesTest extends BackdropWebTestCase {

  function setUp() {
    parent::setUp('googleanalytics');

    $permissions = array(
      'access administration pages',
      'administer google analytics',
    );

    // User to set up google_analytics.
    $this->admin_user = $this->backdropCreateUser($permissions);
  }

  function testGoogleAnalyticsRolesTracking() {
    $ua_code = 'UA-123456-4';
    config_set('googleanalytics.settings', 'account', $ua_code);

    // Test if the default settings are working as expected.

    // Add to the selected roles only.
    config_set('googleanalytics.settings', 'visibility_roles', 0);
    // Enable tracking for all users.
    config_set('googleanalytics.settings', 'roles', array());

    // Check tracking code visibility.
    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is displayed for anonymous users on frontpage with default settings.');
    $this->backdropGet('admin');
    $this->assertRaw('/403.html', '[testGoogleAnalyticsRoleVisibility]: 403 Forbidden tracking code is displayed for anonymous users in admin section with default settings.');

    $this->backdropLogin($this->admin_user);

    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is displayed for authenticated users on frontpage with default settings.');
    $this->backdropGet('admin');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is NOT displayed for authenticated users in admin section with default settings.');

    // Test if the non-default settings are working as expected.

    // Enable tracking only for authenticated users.
    config_set('googleanalytics.settings', 'roles', array(BACKDROP_AUTHENTICATED_ROLE));

    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is displayed for authenticated users only on frontpage.');

    $this->backdropLogout();
    config_set('system.core', 'cache', 0);
    $this->backdropGet('');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is NOT displayed for anonymous users on frontpage.');

    // Add to every role except the selected ones.
    config_set('googleanalytics.settings', 'visibility_roles', 1);
    // Enable tracking for all users.
    config_set('googleanalytics.settings', 'roles', array());

    // Check tracking code visibility.
    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is added to every role and displayed for anonymous users.');
    $this->backdropGet('admin');
    $this->assertRaw('/403.html', '[testGoogleAnalyticsRoleVisibility]: 403 Forbidden tracking code is shown for anonymous users if every role except the selected ones is selected.');

    $this->backdropLogin($this->admin_user);

    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is added to every role and displayed on frontpage for authenticated users.');
    $this->backdropGet('admin');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is added to every role and NOT displayed in admin section for authenticated users.');

    // Disable tracking for authenticated users.
    config_set('googleanalytics.settings', 'roles', array(BACKDROP_AUTHENTICATED_ROLE));

    $this->backdropGet('');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is NOT displayed on frontpage for excluded authenticated users.');
    $this->backdropGet('admin');
    $this->assertNoRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is NOT displayed in admin section for excluded authenticated users.');

    $this->backdropLogout();
    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsRoleVisibility]: Tracking code is displayed on frontpage for included anonymous users.');
  }
}

class GoogleAnalyticsSearchTest extends BackdropWebTestCase {

  function setUp() {
    parent::setUp('googleanalytics', 'search', 'node');

    $permissions = array(
      'access administration pages',
      'administer google analytics',
      'search content',
      'create page content',
      'edit own page content',
    );

    // User to set up google_analytics.
    $this->admin_user = $this->backdropCreateUser($permissions);
    $this->backdropLogin($this->admin_user);
  }

  function testGoogleAnalyticsSearchTracking() {
    $ua_code = 'UA-123456-1';
    config_set('googleanalytics.settings', 'account', $ua_code);

    // Check tracking code visibility.
    $this->backdropGet('');
    $this->assertRaw($ua_code, '[testGoogleAnalyticsSearch]: Tracking code is displayed for authenticated users.');

    $this->backdropGet('search/node');
    $this->assertNoRaw('ga("set", "page",', '[testGoogleAnalyticsSearch]: Custom url not set.');

    // Enable site search support.
    config_set('googleanalytics.settings', 'site_search', 1);

    // Search for random string.
    $search = array();
    $search['keys'] = $this->randomName(8);

    // Create a node to search for.
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['title'] = 'This is a test title';
    $edit["body[$langcode][0][value]"] = 'This test content contains ' . $search['keys'] . ' string.';

    // Fire a search, it's expected to get 0 results.
    $this->backdropPost('search/node', $search, t('Search'));
    $this->assertRaw('ga("set", "page", (window.googleanalytics_search_results) ?', '[testGoogleAnalyticsSearch]: Search results tracker is displayed.');
    $this->assertRaw('window.googleanalytics_search_results = 0;', '[testGoogleAnalyticsSearch]: Search yielded no results.');

    // Save the node.
    $this->backdropPost('node/add/page', $edit, t('Save'));
    $this->assertText(t('@type @title has been created.', array('@type' => 'Page', '@title' => $edit['title'])), 'Node was created.');

    // Index the node or it cannot found.
    $this->cronRun();

    $this->backdropPost('search/node', $search, t('Search'));
    $this->assertRaw('ga("set", "page", (window.googleanalytics_search_results) ?', '[testGoogleAnalyticsSearch]: Search results tracker is displayed.');
    $this->assertRaw('window.googleanalytics_search_results = 1;', '[testGoogleAnalyticsSearch]: One search result found.');

    $this->backdropPost('node/add/page', $edit, t('Save'));
    $this->assertText(t('@type @title has been created.', array('@type' => 'Page', '@title' => $edit['title'])), 'Node was created.');

    // Index the node or it cannot found.
    $this->cronRun();

    $this->backdropPost('search/node', $search, t('Search'));
    $this->assertRaw('ga("set", "page", (window.googleanalytics_search_results) ?', '[testGoogleAnalyticsSearch]: Search results tracker is displayed.');
    $this->assertRaw('window.googleanalytics_search_results = 2;', '[testGoogleAnalyticsSearch]: Two search results found.');
  }

}
