<?php
/**
 * @file
 * The installation instructions for the SMTP Authentication Support.
 */

/**
 * Implements hook_requirements().
 */
function smtp_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    if (config_get('smtp.settings', 'smtp_queue') || config_get('smtp.settings', 'smtp_queue_fail')) {
      $count = db_query("SELECT count('name') FROM {queue} WHERE name='smtp_send_queue'")->fetchField();
      $requirements['smtp_queue'] = array(
        'title' => t('SMTP Queue'),
        'value' => '',
        'severity' => REQUIREMENT_INFO,
      );
      if ($count > 0) {
        $requirements['smtp_queue']['value'] = format_plural($count, 'There is 1 message queued for delivery.', 'There are @count messages queued for delivery.', array('@count' => $count))
          . ' '
          . t('Delivery of the message(s) will be attempted the next time cron runs.');
      }
      else {
        $requirements['smtp_queue']['value'] = t('There are no messages queued for delivery.');
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function smtp_install() {
   config_set('smtp.settings', 'smtp_on', 0);
}

/**
 * Implements hook_uninstall().
 */
function smtp_uninstall() {
  // Restore mail system to previous when module is uninstalled.
  $mail_system = $config->get('smtp_previous_mail_system');
  // Update system wide config value for mail_system.
  config_set('system.mail', 'default-system', $mail_system);
}

/**
 * Implements hook_disable().
 */
function smtp_disable() {
  $mail_system = config_get('smtp.settings', 'smtp_previous_mail_system');
  config_set('system.mail', 'default-system', $mail_system);

}

/**
 * Implements hook_update_last_removed().
 */
function smtp_update_last_removed() {
  return 7100;
}

/**
 * Implements hook_update_N().
 * Upgrade variables to config for Backdrop CMS.
 */
function smtp_update_1000() {
  $config = config('smtp.settings');

  if ($config->get('smtp_on') != 0) {
    config_set('system.mail', 'default-system', 'SmtpMailSystem');
  }

  // Migrate variables.
  $config->set('smtp_on', update_variable_get('smtp_on'));
  $config->set('smtp_queue', update_variable_get('smtp_queue'));
  $config->set('smtp_host', update_variable_get('smtp_host'));
  $config->set('smtp_hostbackup', update_variable_get('smtp_hostbackup'));
  $config->set('smtp_port', update_variable_get('smtp_port'));
  $config->set('smtp_protocol', update_variable_get('smtp_protocol'));
  $config->set('smtp_username', update_variable_get('smtp_username'));
  $config->set('smtp_password', update_variable_get('smtp_password'));
  $config->set('smtp_from', update_variable_get('smtp_from'));
  $config->set('smtp_fromname', update_variable_get('smtp_fromname'));
  $config->set('smtp_allowhtml', update_variable_get('smtp_allowhtml'));
  $config->set('smtp_test_address', update_variable_get('smtp_test_address'));
  $config->set('smtp_debugging', update_variable_get('smtp_debugging'));
  $config->set('smtp_previous_mail_system', update_variable_get('smtp_previous_mail_system'));

  $config->save();

  // Delete old variables.
  update_variable_del('smtp_library');
  update_variable_del('smtp_on');
  update_variable_del('smtp_queue');
  update_variable_del('smtp_host');
  update_variable_del('smtp_hostbackup');
  update_variable_del('smtp_port');
  update_variable_del('smtp_protocol');
  update_variable_del('smtp_username');
  update_variable_del('smtp_password');
  update_variable_del('smtp_from');
  update_variable_del('smtp_fromname');
  update_variable_del('smtp_allowhtml');
  update_variable_del('smtp_test_address');
  update_variable_del('smtp_debugging');
  update_variable_del('smtp_previous_mail_system');
}

/**
 * Updating variable value now that new SMTP logging behavior has been
 * implemented.
 */
function smtp_update_1301() {

  // Redefine constants for update purposes.
  $logging_none = 0;
  $logging_all = 1;
  $logging_errors = 2;

  $logging = $logging_none;

  $old_debugging_value = config_get('smtp.settings', 'smtp_debugging');
  if ($old_debugging_value == 1) {
    $logging = $logging_errors;
  }

  config_set('smtp.settings', 'smtp_debugging', $logging);
}

/**
 * Delete the variable "smtp_test_address".
 */
function smtp_update_1302() {
  // It is unlikely that this would be set in the normal course of events, and
  // it's no longer needed as it was replaced with a form submit handler.
  config_clear('smtp.settings', 'smtp_test_address');
}

/**
 * Update new config variables from the default config file if they haven't been
 * set yet.
 */
function smtp_update_1303() {
  $vars = array(
    'smtp_queue_fail' => FALSE,
    'smtp_client_hostname' => '',
    'smtp_client_helo' => '',
    'smtp_deliver' => TRUE,
    'smtp_reroute_address' => '',
  );
  $config = config('smtp.settings');
  $dirty = FALSE;
  foreach ($vars as $var => $value) {
    if (is_null($config->get($var))) {
      $config->set($var, $value);
      $dirty = TRUE;
    }
  }
  if ($dirty) {
    $config->save();
  }
}

/**
 * Placeholder update function just incase some people have run it already.
 */
function smtp_update_1304() {
  // This was an accdidental (but less good) duplicate of smtp_update_1303().
}
