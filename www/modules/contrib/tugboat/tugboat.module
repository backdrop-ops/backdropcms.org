<?php
/**
 * @file
 * Integrates with Tugboat.qa to allow creating on-the-fly preview sites.
 */

define('TUGBOAT_API_URL', 'https://api.tugboat.qa/v3');

/**
 * Implements hook_config_info().
 */
function tugboat_config_info() {
  return array(
    'tugboat.settings' => array(
      'label' => t('Tugboat settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tugboat_menu() {
  $config = config('tugboat.settings');
  $url = check_plain($config->get('page_url'));

  return array(
    'admin/config/services/tugboat' => array(
      'title' => 'Tugboat',
      'description' => 'Configure Tugboat.qa integration.',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('tugboat_admin_settings'),
      'access arguments' => array('administer tugboat settings'),
      'file' => 'tugboat.admin.inc',
    ),
    $url => array(
      'title' => check_plain($config->get('create_page_title')),
      'page callback' => 'tugboat_preview_create_page',
      'access arguments' => array('create tugboat preview sites'),
      'file' => 'tugboat.pages.inc',
    ),
    $url . '/%' => array(
      'title' => check_plain($config->get('ready_page_title')),
      'page callback' => 'tugboat_preview_ready_page',
      'page arguments' => array(substr_count($url, '/') + 1),
      'access arguments' => array('create tugboat preview sites'),
      'file' => 'tugboat.pages.inc',
    ),
    'admin/reports/tugboat' => array(
      'title' => 'Tugboat previews',
      'description' => 'Manage Tugboat preview sites.',
      'page callback' => 'tugboat_admin_previews',
      'access arguments' => array('administer tugboat settings'),
      'file' => 'tugboat.admin.inc',
    ),
    'admin/reports/tugboat/delete/%' => array(
      'title' => 'Delete preview',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('tugboat_admin_previews_delete', 4),
      'access arguments' => array('administer tugboat settings'),
      'file' => 'tugboat.admin.inc',
    ),
    'admin/reports/tugboat/delete-all' => array(
      'title' => 'Delete all previews',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('tugboat_admin_previews_delete_all'),
      'access arguments' => array('administer tugboat settings'),
      'file' => 'tugboat.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function tugboat_permission() {
  return array(
    'administer tugboat settings' => array(
      'title' => t('Administer Tugboat settings'),
    ),
    'create tugboat preview sites' => array(
      'title' => t('Create Tugboat preview sites'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tugboat_theme() {
  return array(
    'tugboat_preview_create_page' => array(
      'variables' => array(
        'form' => NULL,
      ),
      'template' => 'templates/tugboat-preview-create-page',
    ),
    'tugboat_preview_ready_page' => array(
      'variables' => array(
        'preview_id' => NULL,
        'url' => NULL,
        'age' => NULL,
      ),
      'template' => 'templates/tugboat-preview-ready-page',
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Delete preview sites older than the specified age.
 */
function tugboat_cron() {
  $config = config('tugboat.settings');
  $age = $config->get('preview_site_age');

  // Run at an interval that matches the preview site age.
  if ((REQUEST_TIME - state_get('tugboat_cron', 0)) > $age) {
    state_set('tugboat_cron', REQUEST_TIME);
    $delete_timestamp = REQUEST_TIME - $age;
    $delete_count = 0;

    // Get a list of previews created by this module (so we don't delete any
    // previews created through Tugboat directly).
    foreach ($config->get('previews') as $preview_id => $preview_url) {
      // Load each preview to check if it should be deleted.
      $preview = tugboat_api_curl('/previews/' . $preview_id);

      if ($preview['code'] == 404) {
        // Preview doesn't exist in Tugboat, so remove from config.
        $config->clear('previews.' . $preview_id);
      }
      elseif ($preview['code'] == 200) {
        // Delete if not a base preview (anchor) and it's older than the
        // specified age.
        if (!$preview['body']['anchor'] && strtotime($preview['body']['createdAt']) < $delete_timestamp) {
          $deleted = tugboat_api_curl('/previews/' . $preview_id, array('method' => 'delete'));

          // Keep track of how many previews were deleted and update config.
          if ($deleted['code'] == 204) {
            $delete_count++;
            $config->clear('previews.' . $preview_id);
          }
        }
      }
    }

    // Log deletions in watchdog.
    if ($delete_count) {
      watchdog('tugboat', 'Deleted @count previews older than @date.', array(
        '@count' => $delete_count,
        '@date' => format_date($delete_timestamp),
      ));
    }

    $config->save();
  }
}

/**
 * Get the access token to use in API requests.
 *
 * @return string
 *   The Tugboat access token, loaded from settings or config.
 */
function tugboat_get_token() {
  $token = settings_get('tugboat_access_token');

  if (empty($token)) {
    $token = config_get('tugboat.settings', 'access_token');
  }

  return $token;
}

/**
 * Use cURL to make a request to the Tugboat API.
 *
 * @param string $path
 *   The path to send the request to. This value is appended to TUGBOAT_API_URL
 *   and should start with a '/'.
 * @param array $options
 *   An associative array containing:
 *   - method: (optional) The request method to use. Can be 'get', 'post' or
 *     'delete'. Defaults to 'get'
 *   - body: (optional) An associative array of keys/values to send as the body
 *     of the request. Only used when 'method' is set to 'post'.
 *   - token: (optional) The access token to use for this request. Defaults to
 *     the token previously set in settings/config.
 *
 * @return array
 *   An associative array containing:
 *   - code: The HTTP response code (e.g. 200).
 *   - header: An associative array of HTTP response header key/value pairs.
 *   - body: An associative array of return values.
 */
function tugboat_api_curl($path, $options = array()) {
  // Set default values.
  $options += array(
    'method' => 'get',
    'body' => array(),
    'token' => tugboat_get_token(),
  );

  // Initialise session.
  $ch = curl_init(TUGBOAT_API_URL . $path);

  // Set options.
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Authorization: Bearer ' . $options['token'],
    'Content-Type: application/json',
    'Accept: application/json',
  ));
  curl_setopt($ch, CURLOPT_HEADER, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE);
  if (backdrop_strtolower($options['method']) == 'post') {
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($options['body']));
  }
  elseif (backdrop_strtolower($options['method']) == 'delete') {
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
  }

  // Execute and parse response.
  $response = curl_exec($ch);
  $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
  $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $header = trim(substr($response, 0, $header_size));
  $body = json_decode(substr($response, $header_size), TRUE);

  // Close session.
  curl_close($ch);

  // Log errors to watchdog.
  if ($code >= 400) {
    watchdog('tugboat', 'Tugboat error #@code: @message', array(
      '@code' => $body['code'],
      '@message' => $body['message'],
    ), WATCHDOG_ERROR);
  }

  // Return response data.
  return array(
    'code' => $code,
    'header' => tugboat_parse_header($header),
    'body' => $body,
  );
}

/**
 * Parse HTTP response header.
 *
 * @param string $header
 *   The header string returned from the HTTP request.
 *
 * @return array
 *   An associative array where each key/value is a specific header item and
 *   value.
 *
 * @see https://stackoverflow.com/a/20933560/4168619
 */
function tugboat_parse_header($header) {
  $header_array = array();
  $key = '';

  foreach (explode("\n", $header) as $h) {
    $h = explode(':', $h, 2);
    $h0 = trim($h[0]);

    if (isset($h[1])) {
      $h1 = trim($h[1]);

      if (!isset($header_array[$h[0]])) {
        // Add new value.
        $header_array[$h[0]] = $h1;
      }
      elseif (is_array($header_array[$h[0]])) {
        // Merge value into existing array.
        $header_array[$h[0]] = array_merge($header_array[$h[0]], array($h1));
      }
      else {
        // Convert existing value to array and merge in new value.
        $header_array[$h[0]] = array_merge(array($header_array[$h[0]]), array($h1));
      }

      // Store key for possible future values.
      $key = $h[0];
    }
    else {
      if (substr($h[0], 0, 1) == "\t") {
        $header_array[$key] .= "\r\n\t" . $h0;
      }
      elseif (!$key) {
        $header_array[] = $h0;
      }
    }
  }

  return $header_array;
}
