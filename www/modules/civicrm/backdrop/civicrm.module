<?php

/**
 * @file
 * CiviCRM file for integrating with Backdrop.
 *
 * Project:     CiviCRM: Constituent Relationship Management for NP's
 * File:        civicrm.module
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/**
 * Backdrop module file.
 *
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 */
require_once 'civicrm_user.inc';

define('CIVICRM_UF_HEAD', TRUE);

/**
 * Minimum required PHP
 *
 * Note: This duplicates CRM_Upgrade_Incremental_General::MIN_INSTALL_PHP_VER. The
 * duplication helps avoid a dependency-loop. (Reading `CRM_Upgrade_Incremental_General::MIN_INSTALL_PHP_VER`
 * requires loading `civicrm.settings.php`, but that triggers a parse-error
 * on PHP 5.x.)
 *
 * @see CRM_Upgrade_Incremental_General::MIN_INSTALL_PHP_VER
 * @see CiviBackdrop\PhpVersionTest::testConstantMatch()
 */
define('CIVICRM_BACKDROP_PHP_MINIMUM', '7.2.0');

/**
 * Adds CiviCRM CSS and JS resources into the header.
 */
function civicrm_html_head() {
  if (!civicrm_initialize()) {
    return;
  }

  if (arg(0) == 'civicrm') {
    // Add our standard css & js
    CRM_Core_Resources::singleton()->addCoreResources();
  }
  else {
    CRM_Core_Resources::singleton()->addCoreStyles();
  }
}

/**
 * Implements hook_permission().
 */
function civicrm_permission() {
  // make sure the system is initialized
  if (!civicrm_initialize()) {
    return;
  }

  CRM_Core_Config::singleton();

  $permissions = CRM_Core_Permission::basicPermissions(FALSE, TRUE);
  $perms_array = array();
  foreach ($permissions as $perm => $attr) {
    $title = array_shift($attr);
    $description = array_shift($attr);
    //order matters here, but we deal with that later
    $perms_array[$perm] = array('title' => $title);
    if ($description) {
      $perms_array[$perm]['description'] = $description;
    }
  }
  return $perms_array;
}

/**
 * Implements hook_block_info().
 */
function civicrm_block_info() {
  if (!civicrm_initialize()) {
    return;
  }
  $block = CRM_Core_Block::getInfo();
  return $block;
}

/**
 * Implements hook_block_view().
 */
function civicrm_block_view($delta = '0') {
  if (!civicrm_initialize()) {
    return array();
  }
  $block = CRM_Core_Block::getContent($delta);
  return $block;
}

/**
 * Implements hook_menu().
 */
function civicrm_menu() {
  $items['civicrm'] = array(
    'title' => 'CiviCRM',
    'access callback' => TRUE,
    'page callback' => 'civicrm_invoke',
    'type' => 4,
    'weight' => 0,
  );
  $items['civicrm/setup'] = array(
    'title' => 'CiviCRM Setup',
    'access callback' => TRUE,
    'page callback' => 'civicrm_setup_page',
    'file' => 'civicrm.setup.inc',
    'access arguments' => array('administer modules'),
    'type' => 4,
    'weight' => 0,
  );
  // administration section for civicrm integration modules.
  $items['admin/config/civicrm'] = array(
    'title' => 'CiviCRM',
    'description' => 'Configure CiviCRM integration modules.',
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => backdrop_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Translating profile menu title dynamicaly to overide caching
 */
function civicrm_menu_alter(&$items) {
  if (!civicrm_initialize()) {
    return;
  }

  $profiles = civicrm_user_profiles();
  foreach ($profiles as $profile) {
    $path = 'user/%user/edit/' . $profile['name'];
    $items[$path] = array(
      'page callback' => 'backdrop_get_form',
      'title callback' => 'civicrm_profile_title_callback',
      'title arguments' => array((string) $profile['id'], $profile['title']),
      'page arguments' => array('civicrm_profile_form', 1, 3),
      'access callback' => '_civicrm_profiles_access',
      'access arguments' => array((string) $profile['id']),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
  }
}

/**
 * Implements hook_layout_access_info().
 *
 * Adding a CiviCRM checksum visibility condition.
 */
function civicrm_layout_access_info() {
  $info = array(
    'civicrm_checksum' => array(
      'title' => t('CiviCRM checksum'),
      'description' => t('Has the page been loaded with a valid CiviCRM checksum?'),
      'class' => 'CivicrmChecksumLayoutAccess',
    ),
  );
  return $info;
}

/**
 * Display profile form in tabs on user account
 */
function civicrm_profile_form($form, &$form_state, $account, $profile_name) {
  $output = civicrm_form_data($form, $account, $profile_name, TRUE);
  if (!empty($output)) {
    $form['#attributes']['enctype'] = 'multipart/form-data';
    $form = array_merge($form, $output);
  }
  $form_state['no_cache'] = TRUE;
  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $account->uid,
  );
  $form['profile_name'] = array(
    '#type' => 'hidden',
    '#value' => $profile_name,
  );
  $options['attributes']['class'][] = 'form-cancel';
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['actions']['cancel_form'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => 'user/' . $account->uid,
    '#options' => $options,
    '#weight' => 1,
  );
  return $form;
}

/**
 * Validate civicrm_profile_form
 */
function civicrm_profile_form_validate($form, &$form_state) {
  // lets suppress key generation for all validation also
  civicrm_key_disable();

  static $validated = FALSE;

  if ($validated) {
    return;
  }

  $validated = TRUE;

  $userID = NULL;
  if (!empty($form['uid'])) {
    $userID = CRM_Core_BAO_UFMatch::getContactId($form['uid']['#value']);
  }
  $errors = CRM_Core_BAO_UFGroup::isValid($userID, $form['profile_name']['#value'], FALSE);
  if ($errors && is_array($errors)) {
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Initialize CiviCRM.
 *
 * Call this function from other modules too if they use the CiviCRM API.
 */
function civicrm_initialize() {
  // Check for php version and ensure its greater than minPhpVersion
  if (version_compare(PHP_VERSION, CIVICRM_BACKDROP_PHP_MINIMUM) < 0) {
    echo "CiviCRM requires PHP " . CIVICRM_BACKDROP_PHP_MINIMUM . "+. The web server is running PHP " . PHP_VERSION . ".<p>";
    exit();
  }
  _civicrm_registerClassLoader();

  $initialized = &backdrop_static('civicrm_initialize', FALSE);
  $failure = &backdrop_static('civicrm_initialize_failure', FALSE);

  if ($failure) {
    return FALSE;
  }

  if (!$initialized) {
    if (function_exists('conf_path')) {
      $settingsFile = conf_path() . '/civicrm.settings.php';
    }
    else {
      $settingsFile = conf_init() . '/civicrm.settings.php';
    }
    if (!defined('CIVICRM_SETTINGS_PATH')) {
      define('CIVICRM_SETTINGS_PATH', $settingsFile);
    }

    // get ready for problems
    $docLinkInstall = "https://wiki.civicrm.org/confluence/display/CRMDOC/Installing+CiviCRM+for+Backdrop+CMS";
    $docLinkTrouble = "http://wiki.civicrm.org/confluence/display/CRMDOC/Installation+and+Configuration+Trouble-shooting";
    $forumLink      = "http://forum.civicrm.org/index.php/board,6.0.html";

    $errorMsgAdd = t("Please review the <a href='!1'>Backdrop Installation Guide</a> and the <a href='!2'>Trouble-shooting page</a> for assistance. If you still need help installing, you can often find solutions to your issue by searching for the error message in the <a href='!3'>installation support section of the community forum</a>.</strong></p>",
      array(
        '!1' => $docLinkInstall,
        '!2' => $docLinkTrouble,
        '!3' => $forumLink,
      )
    );

    $loadedSettings = (bool) @include_once $settingsFile;
    if (!$loadedSettings) {
      $failure = TRUE;
      return FALSE;
    }

    // this does pretty much all of the civicrm initialization
    if (!include_once 'CRM/Core/Config.php') {
      $failure = TRUE;
      backdrop_set_message(t("<strong><p class='error'>Oops! - The path for including CiviCRM code files is not set properly. Most likely there is an error in the <em>civicrm_root</em> setting in your CiviCRM settings file (!1). </p><p class='error'> &raquo; civicrm_root is currently set to: <em>!2</em></p><p class='error'>!3</p></strong>", array(
        '!1' => $settingsFile,
        '!2' => $civicrm_root,
        '!3' => $errorMsgAdd,
      )));
      return FALSE;
    }

    $initialized = TRUE;

    // initialize the system by creating a config object
    $config = CRM_Core_Config::singleton();

    // Add module-specific header elements
    $header = civicrm_html_head();
    if (!empty($header)) {
      backdrop_add_html_head($header);
    }

    CRM_Core_Config::singleton()->userSystem->setMySQLTimeZone();
  }

  return TRUE;
}

/**
 * Get CiviCRM query parameters from the url.
 *
 * This is useful for re-adding them to generated urls as backdrop tends to drop
 * them and we need them for language switching and generating urls for metadata.
 */
function _civicrm_get_url_parameters() {
  $excludes = array('q', 'IDS_request_uri', 'IDS_user_agent');
  return backdrop_get_query_parameters(NULL, $excludes);
}

/**
 * Get CiviCRM query parameters from the url as a string for url output.
 *
 * Backdrop tends to strip CiviCRM parameters from urls and we sometimes want to put them back.
 * For example backdrop will output civicrm/contribution/transact as the metadata url whereas
 * we want civicrm/contribution/transact?reset=1&id=2
 *
 * @return string
 *   String of url parameters e.g '?reset=1&id=2'.
 */
function _civicrm_get_url_parameters_as_url_string() {
  $string = backdrop_http_build_query(_civicrm_get_url_parameters());
  if (!empty($string)) {
    $string = '?' . $string;
  }
  return $string;
}

/**
 * Alter metatags before being cached.
 *
 * This hook is invoked prior to the meta tags for a given page are cached.
 *
 * @param array $output
 *   Metatags to be displayed.
 * @param string $instance
 *  Context.
 */
function civicrm_metatag_metatags_view_alter(&$output, $instance) {
  if (arg(0) != 'civicrm') {
    return;
  }
  $linkUrls = array('og:url', 'canonical', 'shortlink');
  foreach ($linkUrls as $url) {
    if (isset($output[$url]['#attached']['backdrop_add_html_head'][0][0]['#value'])) {
      $output[$url]['#attached']['backdrop_add_html_head'][0][0]['#value'] .= _civicrm_get_url_parameters_as_url_string();
    }
  }
}

/**
 * Make the language switcher work with civicrm.
 *
 * We override theme_links__locale_block() so that civicrm language switcher
 * links hold the relevant civicrm parameters.
 *
 * @param array $variables
 *
 * @return array
 */
function civicrm_links__locale_block($variables) {
  if (arg(0) == 'civicrm') {
    foreach ($variables['links'] as $lang => $attr) {
      $variables['links'][$lang]['query'] = _civicrm_get_url_parameters();
    }
  }
  return theme('links', $variables);
}

/**
 * Find & register class loader and store location in Backdrop variable.
 *
 * Per CRM-13737 this allows for backdrop code to be outside the core directory
 * which makes it easier for sites managing their own installation methods that
 * may need to cover different backdrop versions
 */
function _civicrm_registerClassLoader() {
  $home = dirname(__FILE__);
  $path = state_get('civicrm_class_loader', NULL);
  if (empty($path) || !file_exists($home . $path)) {
    $candidates = array(
      '/../CRM/Core/ClassLoader.php',
      '/../civicrm-core/CRM/Core/ClassLoader.php',
      '/../core/CRM/Core/ClassLoader.php',
    );
    foreach ($candidates as $candidate) {
      if (file_exists($home . $candidate)) {
        $path = $candidate;
        state_set('civicrm_class_loader', $candidate);
        break;
      }
    }
  }

  require_once $home . $path;
  CRM_Core_ClassLoader::singleton()->register();
}

/**
 * Function to get the contact type.
 *
 * @param string $default contact type
 *
 * @return string
 *   Contact type
 */
function civicrm_get_ctype($default = NULL) {
  // here we are creating a new contact
  // get the contact type from the POST variables if any

  if (isset($_REQUEST['ctype'])) {
    $ctype = $_REQUEST['ctype'];
  }
  elseif (isset($_REQUEST['edit']) &&
    isset($_REQUEST['edit']['ctype'])
  ) {
    $ctype = $_REQUEST['edit']['ctype'];
  }
  else {
    $ctype = $default;
  }

  if ($ctype != 'Individual' &&
    $ctype != 'Organization' &&
    $ctype != 'Household'
  ) {
    $ctype = $default;
  }
  return $ctype;
}

/**
 * This is the main function that is called on any civicrm page.
 */
function civicrm_invoke() {
  // check if this is a redirect and maybe a user login?
  // this changed between D6 and D7, seems hackish but not sure
  // what we can / should do
  // CRM-9853
  if (isset($_POST['form_build_id']) &&
    isset($_POST['form_id']) &&
    ($_POST['form_id'] == 'user_login_block' || $_POST['form_id'] == 'user_login') &&
    isset($_GET['destination'])
  ) {
    // process the user login form and let it do the redirect?
    return backdrop_get_form('user_login');
  }

  // make sure the system is initialized
  if (!civicrm_initialize()) {
    require_once __DIR__ . '/civicrm.setup.inc';
    // NOTE: The setup page has a built-in authorization check.
    return civicrm_setup_page();
  }

  civicrm_cache_disable();

  $args = explode('/', $_GET['q']);

  // synchronize the backdrop uid with the contacts db
  global $user;

  /**
   * Bypass synchronize if running upgrade to avoid any serious
   * non-recoverable error which might hinder the upgrade process.
   *
   * @FIXME
   */
  if (!isset($args[1]) || $args[1] != 'upgrade') {
    CRM_Core_BAO_UFMatch::synchronize($user, FALSE, 'Backdrop', civicrm_get_ctype('Individual'));
  }

  // Fix the path for the url alias module.
  $urlAlias = FALSE;
  foreach ($args as $index => $arg) {
    if (strpos($arg, '=') !== FALSE) {

      $keepArg = NULL;

      // first check if there is a ?
      if (strpos($arg, '?') !== FALSE) {
        $items   = CRM_Utils_System::explode('?', $arg, 2);
        $keepArg = $items[0];
        $item    = $items[1];
      }
      else {
        $item = $arg;
      }

      // next split it on &
      $elements = explode('&', $item);

      foreach ($elements as $element) {
        // finally split on =
        list($key, $value) = CRM_Utils_System::explode('=', $element, 2);
        if ($value) {
          $_REQUEST[$key] = $value;
        }
      }

      if ($keepArg) {
        $args[$index] = $keepArg;
      }
      else {
        unset($args[$index]);
      }
      $urlAlias = TRUE;
    }
  }

  if ($urlAlias) {
    $_GET['q'] = implode('/', $args);
  }

  $printedContent = NULL;
  ob_start();

  $pageContent = CRM_Core_Invoke::invoke($args);

  $printedContent = ob_get_clean();
  if (empty($pageContent) and
    !empty($printedContent)
  ) {
    $pageContent = $printedContent;
  }
  return $pageContent;
}

/**
 * Determine if the user is on a CiviCRM generated page.
 *
 * i.e. does the form have some civicrm unique token?
 */
function civicrm_on_user_page() {
  return isset($_POST['_qf_default']);
}

/**
 * Determine if profile is part of User Account group.
 */
function _civicrm_profiles_access($profile_id) {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  $allUFGroups = CRM_Core_BAO_UFGroup::getModuleUFGroup('User Account', 0, TRUE);

  if (is_array(CRM_Utils_Array::value($profile_id, $allUFGroups))) {
    return TRUE;
  }
}

/**
 * Callback for hook_menu for the profile title.
 *
 * Translating profile menu title dynamicaly to overide caching.
 */
function civicrm_profile_title_callback($profile_id, $fallback) {
  if (!civicrm_initialize() || empty($profile_id)) {
    return $fallback;
  }

  return CRM_Core_BAO_UFGroup::getTitle($profile_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Attach any relevant profile form fields to user registration form.
 */
function civicrm_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // lets suppress key generation for all registration forms
  civicrm_key_disable();

  $form['#attributes']['enctype'] = 'multipart/form-data';
  $form['#validate'][] = 'civicrm_user_form_validate';

  $form_state['no_cache'] = TRUE;

  $html = CRM_Core_BAO_UFGroup::getEditHTML(NULL, '', NULL, TRUE, TRUE, NULL, FALSE, civicrm_get_ctype('Individual'));

  if ($html) {
    $html = civicrm_add_jquery($html);
    $form['civicrm_profile_register'] = array(
      '#type' => 'item',
      '#markup' => $html,
      '#weight' => 1,
    );
  }
}

/**
 * Handler to validate CiviCRM fields on user registration form.
 */
function civicrm_user_form_validate($form, &$form_state) {
  // lets suppress key generation for all validation also
  civicrm_key_disable();

  $validated = &backdrop_static(__FUNCTION__, FALSE);

  if ($validated) {
    return;
  }

  $validated = TRUE;

  // check for either user/register or admin/people/create
  $register
    = ((arg(0) == 'user' && arg(1) == 'register') ||
      (arg(0) == 'admin' && arg(1) == 'people' && arg(2) == 'create')
    ) ? TRUE : FALSE;
  $userID = NULL;
  if (!empty($form['#user'])) {
    $userID = CRM_Core_BAO_UFMatch::getContactId($form['#user']->uid);
  }
  $errors = CRM_Core_BAO_UFGroup::isValid($userID, NULL, $register);
  if ($errors && is_array($errors)) {
    foreach ($errors as $name => $error) {
      form_set_error($name, $error);
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Retrieve the CiviCRM profile forms
 *
 * @param $account
 * @param $profile
 * @param $reset
 * @param $doNotProcess
 *
 * @return array $output
 */
function civicrm_form_data($edit, $account, $profile, $reset, $doNotProcess = FALSE) {
  // lets suppress key generation for all CMS forms
  civicrm_key_disable();

  $output = array();

  $userID = CRM_Core_BAO_UFMatch::getContactId($account->uid);
  if (!$userID) {
    $ctype = civicrm_get_ctype('Individual');
    CRM_Core_BAO_UFMatch::synchronize($account, FALSE, 'Backdrop', $ctype);
    $userID = CRM_Core_BAO_UFMatch::getContactId($account->uid);
  }

  // at this point we better have a valid userID
  if (!$userID) {
    // we get into this scenario if we do not like the email address supplied by the user
    return array();
  }

  // check for permission
  // CRM-7509
  $session = CRM_Core_Session::singleton();
  $sessionUserID = $session->get('userID');
  $session->replaceUserContext(url(current_path(), array('absolute' => TRUE)));

  if ($sessionUserID != $userID) {
    // do not allow edit for anon users in joomla frontend, CRM-4668, unless u have checksum CRM-5228
    $config = CRM_Core_Config::singleton();
    if ($config->userFrameworkFrontend) {
      CRM_Contact_BAO_Contact_Permission::validateOnlyChecksum($userID, $edit);
    }
    else {
      CRM_Contact_BAO_Contact_Permission::validateChecksumContact($userID, $edit);
    }
  }
  $ctype = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $userID, 'contact_type');
  try {
    $profileID = _civicrm_get_user_profile_id($profile, $userID, $ctype);
  }
  catch (Exception $e) {
    CRM_Core_Error::fatal($e->getMessage());
  }

  $html = CRM_Core_BAO_UFGroup::getEditHTML($userID, $profile, NULL, FALSE, $reset, $profileID, $doNotProcess, $ctype);

  if ($html) {
    $title = CRM_Core_DAO::getFieldValue("CRM_Core_DAO_UFGroup", $profileID, 'title', 'id');
    $html = civicrm_add_jquery($html);
    $index = empty($profile) ? 'civicrm-profile-my-account' : $profile;
    $output[$index][$profile][$profile] = array(
      '#type' => 'item',
      '#title' => $title,
      '#markup' => $html,
      '#value' => $html,
      '#weight' => 1,
    );
  }

  return $output;
}

/**
 * Get appropriate profile ID for edit screen.
 *
 * @param $name
 *
 * @return int
 *   Profile ID.
 *
 * @throws \CRM_Core_Exception
 */
function _civicrm_get_user_profile_id($name) {
  $profiles = civicrm_api3('uf_group', 'get', array(
    'name' => $name,
    'is_active' => 1,
  ));

  if (!$profiles['count']) {
    $profiles = civicrm_api3('uf_group', 'get', array(
      'title' => $name,
      'is_active' => 1,
      'options' => array('limit' => 1),
    ));
  }

  if (!$profiles['count']) {
    // @todo I suspect the profile listing is not possible in both scenarios but need to understand what it
    // means before removing from one warning.
    throw new CRM_Core_Exception(ts('The requested Profile (%1) is disabled OR it is not configured to be used for \'Profile\' listings in its Settings OR there is no Profile with that ID. Please contact the site administrator if you need assistance.',
      array(1 => $name)
    ));
  }

  // CRM-15952 we expected 'name' to be a unique field but the DB doesn't enforce that.
  // Extra check if it is not unique here.
  if ($profiles['count'] > 1) {
    foreach ($profiles['values'] as $profile) {
      try {
        $profiles['id'] = civicrm_api3('uf_join', 'getvalue', array(
          'uf_group_id' => $profile['id'],
          'module' => 'User Account',
          'return' => 'uf_group_id',
        ));
        continue;
      }
      catch (Exception $e) {
      }
    }
  }

  $ufGroupIDs = CRM_Core_Permission::ufGroupClause(CRM_Core_Permission::EDIT, NULL, TRUE);
  $profileID = $profiles['id'];
  if (!in_array($profileID, $ufGroupIDs)) {
    throw new CRM_Core_Exception(ts('The requested Profile (id = %1) is not configured to be used for \'Profile\' listings in its Settings OR there is no Profile with that ID OR you do not have permission to access this profile. Please contact the site administrator if you need assistance.',
      array(1 => $profileID)
    ));
  }
  return $profileID;
}

/**
 * Disable the backdrop cache for all civicrm pages which should not be cached.
 */
function civicrm_cache_disable() {
  if (function_exists('backdrop_page_is_cacheable')) {
    // This is a Backdrop 7 function only - using 'easy option' of checking function.
    backdrop_page_is_cacheable(FALSE);
  }
}

/**
 * Disable civicrm key for all forms that interact with the CMS.
 *
 * We do not control the CMS form generation and hence should suppress
 * qfKey
 */
function civicrm_key_disable() {
  if (!civicrm_initialize()) {
    return FALSE;
  }

  CRM_Core_Config::singleton()->keyDisable = TRUE;
}

/**
 * Implements hook_translated_menu_item_alter().
 *
 * This is a hack
 * to hide the CiviCRM menu from the backdrop navigation block for folks
 * who don't have access CiviCRM permissions
 */
function civicrm_translated_menu_link_alter(&$item) {
  if ($item['router_path'] == 'civicrm' &&
    $item['module'] == 'civicrm' &&
    !user_access('access CiviCRM')
  ) {
    $item['access_callback'] = $item['access'] = FALSE;
  }
}

/**
 * Implements hook_admin_bar_output_alter().
 */
function civicrm_admin_bar_output_alter(&$content) {
  if (!civicrm_initialize()) {
    return;
  }

  $weight = 10;
  $content['menu']['menu']['civicrm'] = array(
    '#title' => t('CiviCRM'),
    '#attributes' => array('class' => array('civicrm')),
    '#href' => 'civicrm',
    '#options' => array(
      'query' => array('reset' => 1),
    ),
    // #weight controls the order of links in the resulting item list.
    '#weight' => $weight,
  );
}

/**
 * Implements hook_autoload_info().
 */
function civicrm_autoload_info() {
  return array(

    // field handlers
    'civicrm_handler_field' => 'modules/views/civicrm/civicrm_handler_field.inc',
    'civicrm_handler_field_activity' => 'modules/views/civicrm/civicrm_handler_field_activity.inc',
    'civicrm_handler_field_address' => 'modules/views/civicrm/civicrm_handler_field_address.inc',
    'civicrm_handler_field_component' => 'modules/views/civicrm/civicrm_handler_field_component.inc',
    'civicrm_handler_field_contact_image' => 'modules/views/civicrm/civicrm_handler_field_contact_image.inc',
    'civicrm_handler_field_contact_link' => 'modules/views/civicrm/civicrm_handler_field_contact_link.inc',
    'civicrm_handler_field_country' => 'modules/views/civicrm/civicrm_handler_field_country.inc',
    'civicrm_handler_field_county' => 'modules/views/civicrm/civicrm_handler_field_county.inc',
    'civicrm_handler_field_custom' => 'modules/views/civicrm/civicrm_handler_field_custom.inc',
    'civicrm_handler_field_custom_file' => 'modules/views/civicrm/civicrm_handler_field_custom_file.inc',
    'civicrm_handler_field_datetime' => 'modules/views/civicrm/civicrm_handler_field_datetime.inc',
    'civicrm_handler_field_backdropid' => 'modules/views/civicrm/civicrm_handler_field_backdropid.inc',
    'civicrm_handler_field_email' => 'modules/views/civicrm/civicrm_handler_field_email.inc',
    'civicrm_handler_field_encounter_medium' => 'modules/views/civicrm/civicrm_handler_field_encounter_medium.inc',
    'civicrm_handler_field_event' => 'modules/views/civicrm/civicrm_handler_field_event.inc',
    'civicrm_handler_field_event_link' => 'modules/views/civicrm/civicrm_handler_field_event_link.inc',
    'civicrm_handler_field_file' => 'modules/views/civicrm/civicrm_handler_field_file.inc',
    'civicrm_handler_field_im' => 'modules/views/civicrm/civicrm_handler_field_im.inc',
    'civicrm_handler_field_link' => 'modules/views/civicrm/civicrm_handler_field_link.inc',
    'civicrm_handler_field_link_activity' => 'modules/views/civicrm/civicrm_handler_field_link_activity.inc',
    'civicrm_handler_field_link_contact' => 'modules/views/civicrm/civicrm_handler_field_link_contact.inc',
    'civicrm_handler_field_link_contribution' => 'modules/views/civicrm/civicrm_handler_field_link_contribution.inc',
    'civicrm_handler_field_link_delete' => 'modules/views/civicrm/civicrm_handler_field_link_delete.inc',
    'civicrm_handler_field_link_edit' => 'modules/views/civicrm/civicrm_handler_field_link_edit.inc',
    'civicrm_handler_field_link_event' => 'modules/views/civicrm/civicrm_handler_field_link_event.inc',
    'civicrm_handler_field_link_participant' => 'modules/views/civicrm/civicrm_handler_field_link_participant.inc',
    'civicrm_handler_field_link_pcp' => 'modules/views/civicrm/civicrm_handler_field_link_pcp.inc',
    'civicrm_handler_field_link_relationship' => 'modules/views/civicrm/civicrm_handler_field_link_relationship.inc',
    'civicrm_handler_field_location' => 'modules/views/civicrm/civicrm_handler_field_location.inc',
    'civicrm_handler_field_mail' => 'modules/views/civicrm/civicrm_handler_field_mail.inc',
    'civicrm_handler_field_markup' => 'modules/views/civicrm/civicrm_handler_field_markup.inc',
    'civicrm_handler_field_money' => 'modules/views/civicrm/civicrm_handler_field_money.inc',
    'civicrm_handler_field_option' => 'modules/views/civicrm/civicrm_handler_field_option.inc',
    'civicrm_handler_field_pcp_raised_amount' => 'modules/views/civicrm/civicrm_handler_field_pcp_raised_amount.inc',
    'civicrm_handler_field_phone' => 'modules/views/civicrm/civicrm_handler_field_phone.inc',
    'civicrm_handler_field_pseudo_constant' => 'modules/views/civicrm/civicrm_handler_field_pseudo_constant.inc',
    'civicrm_handler_field_relationship_type' => 'modules/views/civicrm/civicrm_handler_field_relationship_type.inc',
    'civicrm_handler_field_state' => 'modules/views/civicrm/civicrm_handler_field_state.inc',
    'civicrm_handler_field_website' => 'modules/views/civicrm/civicrm_handler_field_website.inc',

    // filter handlers
    'civicrm_handler_filter_country_multi' => 'modules/views/civicrm/civicrm_handler_filter_country_multi.inc',
    'civicrm_handler_filter_custom_option' => 'modules/views/civicrm/civicrm_handler_filter_custom_option.inc',
    'civicrm_handler_filter_custom_single_option' => 'modules/views/civicrm/civicrm_handler_filter_custom_single_option.inc',
    'civicrm_handler_filter_datetime' => 'modules/views/civicrm/civicrm_handler_filter_datetime.inc',
    'civicrm_handler_filter_domain' => 'modules/views/civicrm/civicrm_handler_filter_domain.inc',
    'civicrm_handler_filter_encounter_medium' => 'modules/views/civicrm/civicrm_handler_filter_encounter_medium.inc',
    'civicrm_handler_filter_group_name' => 'modules/views/civicrm/civicrm_handler_filter_group_name.inc',
    'civicrm_handler_filter_group_status' => 'modules/views/civicrm/civicrm_handler_filter_group_status.inc',
    'civicrm_handler_filter_option' => 'modules/views/civicrm/civicrm_handler_filter_option.inc',
    'civicrm_handler_filter_pseudo_constant' => 'modules/views/civicrm/civicrm_handler_filter_pseudo_constant.inc',
    'civicrm_handler_filter_relationship_type' => 'modules/views/civicrm/civicrm_handler_filter_relationship_type.inc',
    'civicrm_handler_filter_state_multi' => 'modules/views/civicrm/civicrm_handler_filter_state_multi.inc',
    'civicrm_handler_filter_contact_ref' => 'modules/views/civicrm/civicrm_handler_filter_contact_ref.inc',

    // relationship handlers
    'civicrm_handler_relationship' => 'modules/views/civicrm/civicrm_handler_relationship.inc',
    'civicrm_handler_relationship_address' => 'modules/views/civicrm/civicrm_handler_relationship_address.inc',
    'civicrm_handler_relationship_contact2users' => 'modules/views/civicrm/civicrm_handler_relationship_contact2users.inc',
    'civicrm_handler_relationship_group' => 'modules/views/civicrm/civicrm_handler_relationship_group.inc',
    'civicrm_handler_relationship_standard_group' => 'modules/views/civicrm/civicrm_handler_relationship_standard_group.inc',
    'civicrm_handler_relationship_standard_group_contact' => 'modules/views/civicrm/civicrm_handler_relationship_standard_group_contact.inc',
    'civicrm_handler_relationship_im' => 'modules/views/civicrm/civicrm_handler_relationship_im.inc',
    'civicrm_handler_relationship_location' => 'modules/views/civicrm/civicrm_handler_relationship_location.inc',
    'civicrm_handler_relationship_mail' => 'modules/views/civicrm/civicrm_handler_relationship_mail.inc',
    'civicrm_handler_relationship_memberships_contributions' => 'modules/views/civicrm/civicrm_handler_relationship_memberships_contributions.inc',
    'civicrm_handler_relationship_phone' => 'modules/views/civicrm/civicrm_handler_relationship_phone.inc',
    'civicrm_handler_relationship_relationship' => 'modules/views/civicrm/civicrm_handler_relationship_relationship.inc',
    'civicrm_handler_relationship_website' => 'modules/views/civicrm/civicrm_handler_relationship_website.inc',
    'civicrm_handler_relationship_participant' => 'modules/views/civicrm/civicrm_handler_relationship_participant.inc',

    // sort handlers
    'civicrm_handler_sort_address_pseudoconstant' => 'modules/views/civicrm/civicrm_handler_sort_address_pseudoconstant.inc',
    'civicrm_handler_sort_county' => 'modules/views/civicrm/civicrm_handler_sort_county.inc',
    'civicrm_handler_sort_date' => 'modules/views/civicrm/civicrm_handler_sort_date.inc',
    'civicrm_handler_sort_pcp_raised_amount' => 'modules/views/civicrm/civicrm_handler_sort_pcp_raised_amount.inc',
    'civicrm_handler_sort_state' => 'modules/views/civicrm/civicrm_handler_sort_state.inc',

    // argument handlers
    'civicrm_plugin_argument_default' => 'modules/views/civicrm/civicrm_plugin_argument_default.inc',
    'views_handler_argument_civicrm_day' => 'modules/views/civicrm/views_handler_argument_civicrm_day.inc',
    'views_handler_argument_civicrm_fulldate' => 'modules/views/civicrm/views_handler_argument_civicrm_fulldate.inc',
    'views_handler_argument_civicrm_month' => 'modules/views/civicrm/views_handler_argument_civicrm_month.inc',
    'views_handler_argument_civicrm_week' => 'modules/views/civicrm/views_handler_argument_civicrm_week.inc',
    'views_handler_argument_civicrm_year' => 'modules/views/civicrm/views_handler_argument_civicrm_year.inc',
    'views_handler_argument_civicrm_year_month' => 'modules/views/civicrm/views_handler_argument_civicrm_year_month.inc',

    // layout visibility conditions handlers
    'CivicrmChecksumLayoutAccess' => 'modules/layouts/plugins/access/civicrm_checksum_layout_access.inc',

    // Views plugins are mapped in hook_views_plugins() in civicrm.views.inc.
  );
}

/**
 * Implements hook_views_api().
 */
function civicrm_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'civicrm') . '/modules/views',
  );
}

function civicrm_views_query_alter(&$view, &$query) {

  if (!civicrm_initialize()) {
    return;
  }

  // check if we are in multilingual mode, otherwise return
  // TODO: should be a simple call - is_multiligual ?
  $domain = new CRM_Core_DAO_Domain();
  $domain->find(TRUE);

  $multilingual = (bool) $domain->locales;

  if ($multilingual) {
    global $dbLocale;
    $columns = CRM_Core_I18n_SchemaStructure::columns();

    // TODO: for better performance, loop on $query->fields instead
    foreach ($columns as $table => $hash) {
      foreach ($hash as $column => $type) {
        if (array_key_exists("{$table}_{$column}", $query->fields)) {
          $query->fields["{$table}_{$column}"]['field'] = "{$column}{$dbLocale}";
        }
      }
    }
  }
}

function civicrm_add_jquery(&$html) {
  CRM_Core_Resources::singleton()->addCoreResources('html-header');
  // JS/CSS markup will be rendered in theme('page') by preprocess function
  return $html;
}

/**
 * Implements hook_form_alter().
 */
function civicrm_form_alter(&$form, &$form_state, $formID) {
  switch ($formID) {
    case 'user_admin_permissions':
      $form['#submit'][] = 'civicrm_user_admin_permissions_submit';
    case 'system_clean_url_settings':
      if (!empty($form_state['input'])) {
        // reset navigation for permissions changed and clean url
        if (!civicrm_initialize()) {
          return;
        }
        CRM_Core_BAO_Navigation::resetNavigation();
      }
      break;

    default:
      break;
  }
}

/**
 * Custom submit handler for CiviCRM to warn about unsafe permissions for
 * anonymous users.
 *
 * @param $form
 * @param $form_state
 */
function civicrm_user_admin_permissions_submit($form, &$form_state) {
  $role = $form_state['values']['roles']['anonymous'];

  if (!civicrm_initialize()) {
    return;
  }

  $permissions = $form_state['values'][$role->name];
  $warning_permissions = CRM_Core_Permission::validateForPermissionWarnings($permissions);
  $warning_permission_names = array();
  foreach (module_implements('permission') as $module) {
    if ($permissions = module_invoke($module, 'permission')) {
      foreach ($permissions as $key => $permission) {
        if (in_array($key, $warning_permissions)) {
          $warning_permission_names[$key] = $permission['title'];
        }
      }
    }
  }
  if (!empty($warning_permission_names)) {
    backdrop_set_message(t('The %1 role was assigned one or more permissions that may prove dangerous for users of that role to have. Please reconsider assigning %2 to them.',
      array(
        '%1' => $role->label,
        '%2' => implode(', ', $warning_permission_names),
      )), 'warning');
  }
}

/**
 *
 * Implements hook_theme_registry_alter().
 *
 * Based on the jquery_update module.
 *
 * Make sure this page preprocess function runs last
 * so that a theme can't call backdrop_get_js().
 *
 * Also, add civicrm parameters to links so they are not truncated by the
 * language switcher.
 *
 *   Registry theme metadata.
 */
function civicrm_theme_registry_alter(&$theme_registry) {
  // Rewrite the links in order to add back CiviCRM parameters for the language switcher.
  $theme_registry['links__locale_block']['theme path'] = backdrop_get_path('module', 'civicrm');
  $theme_registry['links__locale_block']['function'] = 'civicrm_links__locale_block';
}

/**
 * Implements hook_preprocess_page().
 *
 * CRM-11823 - If Civi bootstrapped, then merge its HTML header with the CMS's header.
 * This hook is intended for page modification, here we are using it to add a header.
 */
function civicrm_preprocess_page(&$variables) {
  global $civicrm_root;
  if (empty($civicrm_root)) {
    return;
  }
  if ($region = CRM_Core_Region::instance('html-header', FALSE)) {
    CRM_Utils_System::addHTMLHead($region->render(''));
  }
}

/**
 * Implements hook_filter_tips().
 */
function civicrm_filter_info() {
  $filters = array();
  $filters['civicrm_smarty'] = array(
    'title' => t('CiviCRM-Smarty filter'),
    'description' => t("Evaluate Smarty and CiviCRM API codes with CiviCRM's embedded Smarty engine"),
    'cache' => FALSE,
    'process callback' => '_civicrm_filter_process',
    'tips callback' => '_civicrm_filter_tips',
    'weight' => 10,
  );
  return $filters;
}

/**
 * Filter tips callback.
 *
 * More explanation required.
 *
 * @param $filter
 * @param $format
 * @param bool $long
 *
 * @return array
 */
function _civicrm_filter_tips($filter, $format, $long = FALSE) {
  return t('Evaluate <a target="_blank" href="@smarty">Smarty</a> and <a target="_blank" href="@civiapi">CiviCRM API</a> codes',
    array(
      '@smarty' => 'http://www.smarty.net/docsv2/en/',
      '@civiapi' => 'http://wiki.civicrm.org/confluence/display/CRMDOC/CiviCRM+Public+APIs',
    )
  );
}

/**
 * Filter process callback.
 *
 * More explanation required.
 *
 * @param $text
 * @param $filter
 * @param $format
 * @param $langcode
 * @param $cache
 * @param $cache_id
 *
 * @return bool|mixed|string
 */
function _civicrm_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (!civicrm_initialize()) {
    return t('(Content unavailable. CiviCRM is not installed.)');
  }

  $config = CRM_Core_Config::singleton();
  $smarty = CRM_Core_Smarty::singleton();
  // as this file is not a class (not sure why) we need the require once
  require_once 'CRM/Core/Smarty/resources/String.php';
  civicrm_smarty_register_string_resource();

  $was_secure       = $smarty->security;
  $smarty->security = TRUE;
  $text             = $smarty->fetch("string:${text}");
  $smarty->security = $was_secure;

  // In the use-case of embedding Smarty codes inside a Backdrop page, one is likely
  // to load data using 'pull MVC' instead of 'push MVC', so the interesting
  // data isn't loaded until after processing the main content. Therefore, we
  // evaluate debug codes after the main content.
  if ($config->debug) {
    $text .= $smarty->fetch('CRM/common/debug.tpl');
  }
  return $text;
}

/**
 * Implements hook_civicrm_postProcess().
 */
function civicrm_civicrm_postProcess($formName, $form) {
  // Reset Views Cache when CiviCRM components page is saved
  if ($form instanceof CRM_Admin_Form_Setting_Component || $form instanceof CRM_Custom_Form_Group || $form instanceof CRM_Custom_Form_Field) {
    if (module_exists('views')) {
      views_invalidate_cache();
    }
  }
}

/**
 * Implements hook_reviews().
 *
 * This implementation is invoked by coder_review module, and defines
 * specific checks for the CiviCRM Coding Standard.
 */
function civicrm_reviews() {
  $br = 'br';
  $rules = array(
    array(
      '#type' => 'regex',
      '#value' => '\t',
      '#warning' => 'Use an indent of 2 spaces, with no tabs',
    ),
    array(
      '#type' => 'regex',
      '#never' => '<\?php',
      '#value' => '^ (  )*[^ \'".]',
      '#warning' => 'Use an indent of 2 spaces, with no tabs',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s(if|elseif|while|foreach|switch|case|return|for|catch)\(',
      '#warning' => 'Control statements should have one space between the control keyword and opening parenthesis',
    ),
    array(
      '#type' => 'regex',
      '#value' => '[\s\(](\w+)\s\(',
      '#not' => '^(if|elseif|while|foreach|switch|case|return|for|list|catch)$',
      '#warning' => 'Functions should be called with no spaces between the function name and opening parentheses',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\){',
      '#warning' => 'use a space between the closing parenthesis and the open bracket',
    ),
    array(
      '#type' => 'regex',
      '#value' => '(\S=>|=>\S)',
      '#source' => 'php',
      '#warning' => 'Arrays should be formatted with a space separating each element and assignment operator',
    ),
    array(
      '#type' => 'regex',
      '#value' => '(\.(?:|\s{2,})[^\)\=\s0-9]|[^\(\s0-9](?:|\s{2,})\.)',
      '#warning' => 'String concatenation should be formatted with a space separating the operators (dot .) and the surrounding terms',
    ),
    array(
      '#type' => 'regex',
      '#value' => '<\?(\w+)',
      '#not' => '^(php|xml)$',
      '#warning' => 'Always use &lt;?php ?&gt; to delimit PHP code, not the &lt;? ?&gt; shorthand',
    ),
    array(
      '#type' => 'regex',
      '#value' => 'global\s+\$(\w+)(,\s\$(\w+))*',
      '#not' => '^_|^(' . _coder_review_style_core_global_regex() . ')$',
      '#warning' => 'global variables should start with a single underscore followed by the module and another underscore',
    ),
    array(
      '#type' => 'callback',
      '#source' => 'all',
      '#value' => '_coder_review_style_closing_php_callback',
      '#warning' => 'the final ?> should be omitted from all code files',
    ),
    array(
      '#type' => 'regex',
      '#value' => '}\s*else',
      '#warning' => 'else statements should begin on a new line',
    ),
    array(
      '#type' => 'regex',
      '#value' => '[,][^ \n\r]',
      '#warning' => 'missing space after comma',
    ),
    array(
      '#type' => 'regex',
      '#value' => '^\s*{',
      '#warning' => 'curly braces { should end a line, not start one',
    ),
    array(
      '#type' => 'regex',
      '#source' => 'html',
      // NOTE: use $br only to avoid a warning.
      '#value' => '<' . $br . '>',
      '#warning' => 'use &lt;br /&gt; instead of &lt;br&gt;',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#source' => 'html',
      '#value' => '(?-i)<[A-Z]+',
      '#warning_callback' => '_coder_review_style_xhtml_warning',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s(if|elseif|while|foreach|switch|return|for|catch)\s*\(.*\) \s*{\s*[^\s]+',
      '#warning' => 'The control statement should be on a separate line from the control conditional',
    ),
    array(
      '#type' => 'regex',
      '#filename' => array('tpl.php'),
      '#value' => '\s(if|elseif)\s*\(.*\) \s*{\s*[^\s]+',
      '#warning' => 'The control statement should use ":" syntax instead of curly braces.',
    ),
    array(
      '#type' => 'regex',
      '#source' => 'all',
      '#value' => '[ \t]+$',
      '#warning' => 'There should be no trailing spaces',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '[\s\(](strlen|strtolower|strtoupper|substr|ucfirst)\s*\(',
      '#warning' => 'in most cases, replace the string function with the backdrop_ equivalent string functions',
      '#severity' => 'minor',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\[\s*[A-Za-z][A-Za-z0-9_]*\s*]',
      '#not' => '\[\s*[A-Z][A-Z0-9_]*\s*]',
      '#warning' => 'use quotes around a string literal array index, this is not only a style issue, but a known performance problem',
      '#case-sensitive' => TRUE,
    ),
    array(
      '#type' => 'regex',
      '#value' => '[\s=>]+(true|false|null)[\)\s;,\n\r]+',
      '#case-sensitive' => TRUE,
      '#warning' => 'Use uppercase for PHP constants, e.g. NULL, TRUE, FALSE',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s+else\s+if\s*\(',
      '#warning' => 'Use "elseif" in place of "else if"',
    ),
    array(
      '#type' => 'regex',
      '#value' => '\s*[\'"]#value[\'"]\s*=>\s*t\s*\(\s*[\'"]Submit[\'"]\s*\)',
      '#source' => 'allphp',
      '#warning' => 'When labelling buttons, make it clear what the button does, "Submit" is too generic.',
      '#severity' => 'minor',
    ),
  );
  $review = array(
    '#title' => t('CiviCRM Coding Standards'),
    '#link' => 'http://civicrm.org',
    '#rules' => $rules,
    '#description' => t('Should apply to all CiviCRM code.'),
  );
  return array('civicrm_coder' => $review);
}

/**
 * Implements hook_modules_installed().
 */
function civicrm_modules_installed($modules) {
  if (!civicrm_initialize()) {
    return;
  }
  CRM_Core_Invoke::rebuildMenuAndCaches(TRUE);
}

/**
 * Implements hook_modules_enabled().
 */
function civicrm_modules_enabled($modules) {
  if (!civicrm_initialize()) {
    return;
  }
  CRM_Core_Invoke::rebuildMenuAndCaches(TRUE);
}

/**
 * Implements hook_modules_disabled().
 */
function civicrm_modules_disabled($modules) {
  if (!civicrm_initialize()) {
    return;
  }
  CRM_Core_Invoke::rebuildMenuAndCaches(TRUE);
}

/**
 * Implements hook_modules_uninstalled().
 */
function civicrm_modules_uninstalled($modules) {
  if (!civicrm_initialize()) {
    return;
  }
  CRM_Core_Invoke::rebuildMenuAndCaches(TRUE);
}

/**
 * Implements hook_metatag_page_cache_cid_parts_alter().
 *
 * Append the query string to the key under which the page title is cached to
 * prevent cross-contamination from URLs such as civicrm/contribute/transact.
 *
 * If the metatag module is not installed this function will not fire.
 *
 */
function civicrm_metatag_page_cache_cid_parts_alter(&$cid_parts) {
  // Avoid substr() because it will not work with Backdrop language prefixes.
  if (!empty($cid_parts['path']) && strpos($cid_parts['path'], 'civicrm') !== FALSE) {
    $get = $_GET;
    ksort($get);
    $cid_parts['path'] .= '/' . md5(print_r($get, TRUE));
  }
}
