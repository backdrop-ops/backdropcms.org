<?php
/*
  +--------------------------------------------------------------------+
  | CiviCRM version 5                                                  |
  +--------------------------------------------------------------------+
  | This file is a part of CiviCRM.                                    |
  |                                                                    |
  | CiviCRM is free software; you can copy, modify, and distribute it  |
  | under the terms of the GNU Affero General Public License           |
  | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
  |                                                                    |
  | CiviCRM is distributed in the hope that it will be useful, but     |
  | WITHOUT ANY WARRANTY; without even the implied warranty of         |
  | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
  | See the GNU Affero General Public License for more details.        |
  |                                                                    |
  | You should have received a copy of the GNU Affero General Public   |
  | License and the CiviCRM Licensing Exception along                  |
  | with this program; if not, contact CiviCRM LLC                     |
  | at info[AT]civicrm[DOT]org. If you have questions about the        |
  | GNU Affero General Public License or the licensing of CiviCRM,     |
  | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
  +--------------------------------------------------------------------+
 */

/**
 * @file
 * A simple module that adds a user to groups based on Role.
 */

/**
 * Implements hook_config_info().
 */
function civicrm_group_roles_config_info() {
  $prefixes['civicrm_group_roles.settings'] = array(
    'label' => t('CiviCRM Group Roles settings'),
    'group' => t('CiviCRM'),
  );
  return $prefixes;
}

/**
 * Implements hook_user_insert().
 *
 * When a new user is created, add them to Civi groups depending on their
 * assigned roles.
 */
function civicrm_group_roles_user_insert($account) {
  if (!civicrm_initialize()) {
    return;
  }
  civicrm_group_roles_add_groups_oncreate($account, $account->roles);
}

/**
 * Implements hook_user_update().
 *
 * When a user is updated, add/remove them from Civi groups according to their
 * roles.
 */
function civicrm_group_roles_user_update($account) {
  if (!civicrm_initialize()) {
    return;
  }
  $roles = array_diff($account->roles, array(BACKDROP_ANONYMOUS_ROLE, BACKDROP_AUTHENTICATED_ROLE));

  if ($roles) {
    civicrm_group_roles_add_remove_groups($account, $roles, 'add');
  }
}

/**
 * Implements hook_user_login().
 *
 * When a user logs in, update their roles depending on which Civi groups they
 * are a member of.
 */
function civicrm_group_roles_user_login(&$edit, $account) {
  civicrm_group_roles_sync_roles($account);
}

/**
 * Helper function to add a user to Civi groups depending on their roles, when
 * the user is first created
 *
 * @param object $account
 * @param array $roles
 */
function civicrm_group_roles_add_groups_oncreate($account, $roles) {
  if (!civicrm_initialize()) {
    return;
  }

  require_once 'CRM/Core/BAO/UFMatch.php';
  $contactId = CRM_Core_BAO_UFMatch::getContactId($account->uid);

  if (!$contactId) {
    return;
  }

  $config = config('civicrm_group_roles.settings');
  $result = $config->get('rules');
  foreach ($result as $rule) {
    if (in_array($rule['role_name'], array_keys($roles))) {
      $group_ids[] = $rule['group_id'];
    }
  }
  $groups = _civicrm_group_roles_validate_groups($group_ids);
  foreach ($groups as $group) {
    $groupContact = new CRM_Contact_DAO_GroupContact();
    $groupContact->group_id = $group->group_id;
    $groupContact->contact_id = $contactId;

    if (!$groupContact->find(TRUE)) {
      // add the contact to group
      $historyParams = array(
        'contact_id' => $contactId,
        'group_id' => $group->group_id,
        'method' => 'API',
        'status' => 'Added',
        'date' => date('YmdHis'),
        'tracking' => NULL,
      );
      CRM_Contact_BAO_SubscriptionHistory::create($historyParams);
      $groupContact->status = 'Added';
      $groupContact->save();
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * The updates CiviCRM when Backdrop roles are changed
 */
function civicrm_group_roles_form_alter(&$form, &$form_state, $form_id) {
  // Append this to change user edit submit function.
  if (($form['#id'] == 'user-profile-form' && isset($form['#user']) && (module_exists('content_profile') ||
    isset($form['account']))) || $form['#id'] == 'user-edit-form') {
    $uid = $form['#user']->uid;
    if (!$uid) {
      return;
    }
    // Make sure there is a CiviCRM record.
    civicrm_initialize(TRUE);
    require_once 'CRM/Core/BAO/UFMatch.php';
    $contact_id = CRM_Core_BAO_UFMatch::getContactId($uid);
    if (!$contact_id) {
      return;
    }
    array_unshift($form['#submit'], '_civicrm_group_update');
  }
}

/**
 * Helper function to remove Groups when Backdrop user form is saved, if a role
 * is removed in Backdrop.
 */
function _civicrm_group_update($form, $form_values) {
  // Note the Backdrop form calls this function directly so CiviCRM needs to be
  // initialised.
  if (!civicrm_initialize()) {
    return;
  }
  $uid = $form['#user']->uid;
  $account = user_load($uid);
  //Load the currently saved roles.
  $roles = $account->roles;
  // Get the roles as submitted on the user form.
  if (!is_array($form_values['values']['roles'])) {
    return;
  }
  $new_roles = array_filter($form_values['values']['roles']);

  // If there is a difference then something was removed.
  $removed_roles = array_diff_key($roles, $new_roles);

  // Now delete the corresponding group from the record in CiviCRM (if there is
  // a corresponding group).
  if ($removed_roles) {
    civicrm_group_roles_add_remove_groups($account, $removed_roles, 'remove');
  }
}

/**
 * Implements hook_civicrm_post().
 *
 * This provides sync from CiviCRM -> Backdrop
 */
function civicrm_group_roles_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if (!civicrm_initialize()) {
    return;
  }
  if ($objectName != 'GroupContact') {
    // We only care about Group contact operations, so bail on anything else.
    return;
  }

  $group_id = $objectId;

  $config = config('civicrm_group_roles.settings');
  $rules = $config->get('rules');
  foreach ($rules as $rule) {
    if ($rule['group_id'] == $group_id) {
      $groupRoles[] = $rule['role_name'];
    }
  }

  $rolesProcessed = array();
  foreach ($groupRoles as $role_name) {
    foreach ($objectRef as $contact_id) {
      if (isset($rolesProcessed[$role_name])) {
        continue;
      }

      // Do we have a Backdrop Account?
      require_once 'CRM/Core/BAO/UFMatch.php';
      $uid = CRM_Core_BAO_UFMatch::getUFId($contact_id);
      // Make sure we have an actual user account.
      if (!$uid) {
        continue;
      }

      switch ($op) {
        case 'create':
          // Contact added to group; add to corresponding role.
          $rolesProcessed[$role_name] = $role_name;
          civicrm_group_roles_add_role($uid, $role_name);
          break;

        // "Edit" denotes both rejoining or being deleted from a group.
        // Need to check which to perform appropriate action.
        case 'edit':
          $rolesProcessed[$role_name] = $role_name;
          // Ideally would use GroupContact API with group_id as a parameter,
          // currently broken (amend once bug fixed):
          // http://issues.civicrm.org/jira/browse/CRM-10331?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel
          $contact_groups = civicrm_api('GroupContact', 'get', array(version => '3', 'contact_id' => $contact_id));
          $in_group = FALSE;
          foreach ($contact_groups['values'] as $group_row) {
            if ($group_row['group_id'] == $group_id) {
              $in_group = TRUE;
              break;
            }
          }

          if ($in_group) {
            // Contact rejoined the group; add to corresponding role.
            civicrm_group_roles_add_role($uid, $role_name);
          }
          else {
            // Contact no longer belongs to group, remove corresponding role,
            // but only if the contact is in no other groups that grant this
            // role.
            if (!civicrm_role_granted_by_other_group($contact_id, $role_name, $group_id)) {
              civicrm_group_roles_del_role($uid, $role_name);
            }
          }
          break;

        case 'delete':
          $rolesProcessed[$role_name] = $role_name;
          // Contact is removed from group.
          // Remove the role, but only if the contact is in no other groups
          // that grant this role.
          if (!civicrm_role_granted_by_other_group($contact_id, $role_name, $group_id)) {
            civicrm_group_roles_del_role($uid, $role_name);
          }
          break;
      }
    }
  }
}

/**
 * Helper function to add a role to a given user
 *
 * @param int $uid The user id of the account to modify
 * @param string $role_name The role name being added
 */
function civicrm_group_roles_add_role($uid, $role_name) {
  $account = user_load((int) $uid, TRUE);

  // Skip adding the role to the user if they already have it.
  if ($account !== FALSE && !in_array($role_name, $account->roles)) {
    $account->roles = $account->roles + array($role_name);
    $account->save();
  }
}

/**
 * Helper function to remove a role from a given user
 *
 * @param $uid The user id of the account to modify
 * @param $role_name The role name being removd
 */
function civicrm_group_roles_del_role($uid, $role_name) {
  $account = user_load((int) $uid);
  // Skip removing the role from the user if they don't have it.
  if ($account !== FALSE && in_array($role_name, $account->roles)) {
    $account->roles = array_diff($account->roles, array($role_name));
    $account->save();
  }
}

/**
 * Count the groups this contact is in which grant this role
 *
 * @param int $contact_id
 * @param string $rid
 * @param int $group_id
 *
 * @return bool|null
 *   TRUE if there are groups.
 */
function civicrm_role_granted_by_other_group($contact_id, $rid, $group_id) {
  if (!civicrm_initialize()) {
    return;
  }

  // Get all the groups this contact belongs to.
  $params = array('version' => 3, 'contact_id' => $contact_id);
  $result = civicrm_api('group_contact', 'get', $params);

  if (civicrm_error($result)) {
    return TRUE;
  }
  else {
    // Contact is not in *any* other groups so delete the role.
    if (count($result) == 0) {
      return FALSE;
    }
    // Contact is in some groups, determine if any of them grant this role.
    else {
      // Check if group has been added by api or not.
      $group_ids = array();
      foreach ($result as $grpid => $grp) {
        $group_ids[] = CRM_Utils_Array::value('group_id', $grp);
      }
    }

    $group_rules = 0;

    $config = config('civicrm_group_roles.settings');
    $rules = $config->get('rules');
    foreach ($rules as $rule) {
      if (in_array($rule['group_id'], $group_ids)) {
        $group_rules++;
      }
    }

    return ($group_rules > 0);
  }
}

/**
 * Implements hook_menu().
 */
function civicrm_group_roles_menu() {
  $items = array();
  $items['admin/config/civicrm/civicrm_group_roles'] = array(
    'title' => 'CiviGroup Roles Sync',
    'description' => 'Add/remove association rules and configure settings. Also perform manual synchronization.',
    'page callback' => 'civicrm_group_roles_show_rules',
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group role setting'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/civicrm/civicrm_group_roles/show_rules'] = array(
    'title' => 'Association rules',
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group role setting'),
    'weight' => -5,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/civicrm/civicrm_group_roles/add_rule'] = array(
    'title' => 'Add association rule',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('civicrm_group_roles_add_rule_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group role setting'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/civicrm/civicrm_group_roles/add_rule/%rule_id'] = array(
    'title' => 'Edit association rule',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('civicrm_group_roles_add_rule_form', 1),
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group role setting'),
  );
  $items['admin/config/civicrm/civicrm_group_roles/manual_sync'] = array(
    'title' => 'Manually synchronize',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('civicrm_group_roles_manual_sync'),
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group role setting'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/civicrm/civicrm_group_roles/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('civicrm_group_roles_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('access civicrm group role setting'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function civicrm_group_roles_permission() {
  return array(
    'access civicrm group role setting' => array(
      'title' => t('Access CiviCRM group role setting'),
      'description' => t('Access Civicrm group roles synchronization.'),
    ),
  );
}

/**
 * Show stored association rules and delete rules.
 *
 * @param string $action
 * @param int $id
 *
 * @return string|array|null
 *   Array of rules or message if none.
 */
function civicrm_group_roles_show_rules($action = NULL, $id = NULL) {
  if (!civicrm_initialize()) {
    return;
  }
  $config = config('civicrm_group_roles.settings');

  if ($action == 'delete') {
    if (is_numeric($id)) {
      $config->clear('rules.' . $id);
      $config->save();
      backdrop_set_message(t('Rule ID !1 was successfully deleted.', array('!1' => $id)));
    }
  }

  // Get Backdrop roles.
  $roles = user_roles(TRUE);

  // Get CiviCRM groups.
  $params = array('version' => 3, 'option.limit' => 0);
  $groups = civicrm_api('group', 'get', $params);
  $groups = CRM_Utils_Array::value('values', $groups);

  // Begin building main output table.
  $header = array('rid' => t('Rule ID'), 'name' => t("Rule Name ('CiviCRM Group' <--> 'Backdrop Role')"), 'op' => t('Operations'));
  $data = array();

  $rules = $config->get('rules');
  foreach ($rules as $id => $result) {
    $gid = CRM_Utils_Array::value($result['group_id'], $groups);
    $data[] = array(
      'rid' => check_plain($id),
      'name' => check_plain(CRM_Utils_Array::value('title', $gid) . " <--> " . $roles[$result['role_name']]),
      'op' => l(t('edit'), 'admin/config/civicrm/civicrm_group_roles/add_rule' . '/' . check_plain($id)) . '&nbsp;&nbsp;' . l(t('delete'), 'admin/config/civicrm/civicrm_group_roles/delete' . '/' . check_plain($id)),
    );
  }

  if (!empty($data)) {
    $output['data'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $data,
    );
  }
  else {
    $output = t('There are no rules currently set.');
  }

  return $output;
}

/**
 * Form Builder: add/edit association rules.
 *
 * @ingroup forms
 * @see civicrm_group_roles_add_rule_validate()
 * @see civicrm_group_roles_add_rule_submit()
 */
function civicrm_group_roles_add_rule_form($form, $form_state = array(), $edit_id = NULL) {
  if (!civicrm_initialize()) {
    return;
  }

  $config = config('civicrm_group_roles.settings');

  // Retrieve Backdrop roles.
  $roles = user_roles(TRUE);

  // Get CiviCRM groups.
  require_once "CRM/Core/PseudoConstant.php";
  $groups = CRM_Core_PseudoConstant::group();

  // Let's get rid of the authenticated role. It's a required role so can't be
  // used for syncing.
  unset($roles['authenticated']);

  // Begin add form.
  $form = array();
  $form['add_rule'] = array(
    '#type' => 'fieldset',
    '#title' => t('Association Rule'),
    '#description' => t('Choose a CiviCRM Group and a Backdrop Role below.'),
    '#tree' => TRUE,
    '#parents' => array('add_rule'),
  );
  $form['add_rule']['select_group'] = array(
    '#type' => 'select',
    '#title' => t('CiviCRM Group'),
    '#options' => $groups,
    '#required' => TRUE,
  );
  $form['add_rule']['select_role'] = array(
    '#type' => 'select',
    '#title' => t('Backdrop Role'),
    '#options' => $roles,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add association rule'),
  );

  // Begin edit form.
  if (!empty($edit_id) && is_numeric($edit_id)) {
    $default_values = $config->get('rules.' . $edit_id);
    if (!$default_values) {
      backdrop_set_message(t('There was an error in obtaining the association rule for edit. Please check your database settings and try again. If you continue to get this error message then try to reinstall CiviGroup Roles Sync.'));
      return $form;
    }

    // Alter above add form with default values.
    $form['add_rule']['select_group']['#default_value'] = check_plain($default_values['group_id']);
    $form['add_rule']['select_role']['#default_value'] = check_plain($default_values['role_name']);
    $form['edit_flag'] = array('#type' => 'hidden', '#value' => check_plain($edit_id));
    $form['submit']['#value'] = t('Save changes');
  }

  return $form;
}

/**
 * Validation handler for add/edit association rules.
 *
 * @see civicrm_group_roles_add_rule_form
 */
function civicrm_group_roles_add_rule_form_validate($form, &$form_state) {
  // Make sure there is a CiviMember Membership Type and a Backdrop Role
  // selected.
  if (is_numeric($form_state['values']['add_rule']['select_group']) && isset($form_state['values']['add_rule']['select_role'])) {
    if ($form_state['values']['add_rule']['select_group'] == 0 || $form_state['values']['add_rule']['select_role'] == '') {
      form_set_error('add_rule', t('You must select both a CiviCRM Group and a Backdrop Role from the "Association Rule" section.'));
    }
  }
  else {
    form_set_error('add_rule', t('Please select CiviCRM Group and Backdrop Role.'));
  }

  // Validate edit flag if set.
  if (isset($form_state['values']['edit_flag']) && !is_numeric($form_state['values']['edit_flag'])) {
    for_set_error('', t('Edit flag was not numeric.'));
  }
}

/**
 * Submit handler for add/edit association rule form.
 *
 * @see civicrm_group_roles_add_rule_form
 */
function civicrm_group_roles_add_rule_form_submit($form, &$form_state) {
  if (!civicrm_initialize()) {
    return;
  }

  // If edit_flag is not set then get next highest number.
  $config = config('civicrm_group_roles.settings');
  if (empty($form_state['values']['edit_flag'])) {
    $id = max(array_keys($config->get('rules'))) + 1;
  }
  else {
    $id = (int) $form_state['values']['edit_flag'];
  }

  $config->set('rules.' . $id,
    array(
      'role_name' => $form_state['values']['add_rule']['select_role'],
      'group_id' => (int) $form_state['values']['add_rule']['select_group'],
    )
  );
  $config->save();

  if (!empty($form_state['values']['edit_flag'])) {
    backdrop_set_message(t('Your association rule has been edited.'));
  }
  else {
    backdrop_set_message(t('Your association rule has been added.'));
  }

  $form_state['redirect'] = 'admin/config/civicrm/civicrm_group_roles';
}

/**
 * Helper function to add and remove users from groups
 *
 * Use after user_save to remove roles $roles = $edit['roles'] for user_save.
 *
 * @param object $account
 *   Backdrop user object
 * @param array $roles
 *   list of role to add/remove
 * @param string $op
 *   either add or remove
 */
function civicrm_group_roles_add_remove_groups($account, $roles, $op) {
  if (!civicrm_initialize()) {
    return;
  }

  if ($op == 'add') {
    $txt = 'added';
  }
  elseif ($op == 'remove') {
    $txt = 'removed';
  }
  else {
    return;
  }
  $debug_mode = FALSE;

  $config = config('civicrm_group_roles.settings');

  // Make sure user has other roles other than authenticated.
  if ($roles) {
    // Find the contact record.
    $params = array(
      'version' => 3,
      'sequential' => 1,
      'return' => 'contact_id',
      'uf_id' => $account->uid,
    );
    $contact = civicrm_api('UFMatch', 'get', $params);

    if (!empty($contact['values']) && !CRM_Utils_Array::value('is_error', $contact) && is_numeric($contact['values'][0]['contact_id'])) {
      $contact_id = CRM_Utils_Array::value('contact_id', $contact['values'][0]);

      // Loop over user's roles.
      foreach ($roles as $role) {
        // Find the group(s) for the role.
        $rules = $config->get('rules');
        $group_ids = array();
        foreach ($rules as $rule) {
          if ($rule['role_name'] == $role) {
            $group_ids[] = $rule['group_id'];
          }
        }

        $group_ids = _civicrm_group_roles_validate_groups($group_ids);
        foreach ($group_ids as $group_id) {
          // Add the contact.
          $gparams = array('version' => 3, 'group_id' => $group_id, 'contact_id' => $contact_id);
          if ($op == 'add') {
            $result = civicrm_api('GroupContact', 'create', $gparams);
          }
          else {
            $result = civicrm_api('GroupContact', 'delete', $gparams);
          }

          if ($result['is_error'] > 0) {
            watchdog('civicrm_group_roles', 'Error: Unable to sync role @role', array('@role' => $role), WATCHDOG_ERROR);
            if ($debug_mode) {
              backdrop_set_message(t('Error: Unable to sync role %role', array('%role' => $role)));
            }
          }
          elseif ($debug_mode && $result['values'][$txt] > 0) {
            backdrop_set_message("$txt user $account->name Group: $role");
            backdrop_set_message(var_export($result, TRUE));
          }
          elseif ($debug_mode) {
            backdrop_set_message("User $account->name NOT $txt Group: $role");
            backdrop_set_message(var_export($result, TRUE));
          }
        }
      }

    }
    else {
      watchdog('civicrm_group_roles', 'CiviCRM contact not found for Backdrop user ID @id', array('@id' => $user->uid), WATCHDOG_ERROR);
      if ($debug_mode) {
        backdrop_set_message(t('CiviCRM contact not found for Backdrop user ID @id', array('@id' => $user->uid)));
      }
    }
  }
}

/**
 * Manual sync form.
 *
 * Provides a submit button to manually sync groups to roles.
 *
 * @ingroup forms
 * @see civicrm_group_roles_manual_sync_submit()
 */
function civicrm_group_roles_manual_sync() {
  $form = array();
  $form['manual_sync'] = array(
    '#type' => 'fieldset',
    '#title' => t('Manual Synchronization'),
    '#description' => t('Manually synchronize CiviCRM group membership and Backdrop roles according to the current association rules. This process may take a long time.'),
  );
  $form['manual_sync']['manual_sync_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Synchronize now'),
  );

  return $form;
}

/**
 * Submit handler for manual sync form
 *
 * @see civicrm_group_roles_manual_sync
 */
function civicrm_group_roles_manual_sync_submit($form, &$form_state) {
  if (!civicrm_initialize()) {
    return;
  }

  return civicrm_group_roles_batch_init();
}

/**
 * Batch functions to manually update large number of users
 */
function civicrm_group_roles_batch_init() {

  $batch = array(
    'title' => t('Updating Users...'),
    'operations' => array(),
    'init_message' => t('Starting Update'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'civicrm_group_roles_batch_finished',
    'progressive' => FALSE,
  );

  // Find all existing users
  $result = db_query('SELECT uid FROM {users}');

  foreach ($result as $record) {
    $batch['operations'][] = array('civicrm_group_roles_batch_worker', array($record->uid));
  }

  batch_set($batch);

  batch_process('admin/config/civicrm/civicrm_group_roles');
}

/**
 * Batch worker
 *
 * @see civicrm_group_roles_batch_init()
 */
function civicrm_group_roles_batch_worker($uid, &$context) {
  if (!civicrm_initialize()) {
    return;
  }

  $account = user_load($uid);

  if ($account !== FALSE) {

    $roles = array_diff($account->roles, array(BACKDROP_ANONYMOUS_ROLE, BACKDROP_AUTHENTICATED_ROLE));

    // Add user to groups
    if ($roles) {
      civicrm_group_roles_add_remove_groups($account, $roles, 'add');
    }

    // Add roles to user
    civicrm_group_roles_sync_roles($account);
  }

  if (empty($context['results'])) {
    $context['results']['processed'] = 0;
  }
  $context['results']['processed']++;
}

/**
 * Batch finish handler
 *
 * @see civicrm_group_roles_batch_init()
 */
function civicrm_group_roles_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural($results['processed'], 'One user processed.', '@count users processed.');
  }
  else {
    $message = 'some errors';
  }

  backdrop_set_message($message);
}

/**
 * Filters invalid groups out of a civicrm_group_roles_rules query result
 *
 * @param array $group_ids
 *
 * @return array
 */
function _civicrm_group_roles_validate_groups(array $group_ids) {
  foreach ($group_ids as $key => $group_id) {
    $group_result = civicrm_api('Group', 'get', array(
      'group_id' => $group_id,
      'sequential' => 1,
      'version' => 3,
    ));

    // CRM-16033: Ensure the group hasn't been deleted
    if ($group_result['count'] === 0) {
      $msg = 'Error: Cannot add contact to nonexistent group (ID @groupId)';
      $variables = array('@groupId' => $group_id);
      watchdog('civicrm_group_roles', $msg, $variables, WATCHDOG_ERROR);
      unset($group_ids[$key]);
      continue;
    }

    // CRM-11161: Exclude smart groups as we don't want to add contacts statically to a smart group
    if (CRM_Utils_Array::value('saved_search_id', $group_result['values'][0])) {
      $debugging = config_get('civicrm_group_roles.settings', 'civicrm_group_roles_debugging');
      if ($debugging) {
        $msg = 'Group ID @groupId is a smart group, so the user was not added to it statically.';
        $variables = array('@groupId' => $group_id);
        watchdog('civicrm_group_roles', $msg, $variables, WATCHDOG_INFO);
      }
      unset($group_ids[$key]);
      continue;
    }
  }
  return $group_ids;
}

/**
 * Helper function to add and remove roles from a user depending on the groups
 * they are a member of
 *
 * @param $account object The user account being processed
 */
function civicrm_group_roles_sync_roles($account) {
  if (!civicrm_initialize()) {
    return;
  }

  require_once 'api/api.php';
  require_once 'CRM/Core/BAO/UFMatch.php';

  //find the contact record
  $contact = CRM_Core_BAO_UFMatch::getContactId($account->uid);
  if (!$contact) {
    return;
  }

  // To account for the case of smart groups, we grab *all* the rules,
  // and look for this contact in a list of group members
  // CRM-11161
  $config = config('civicrm_group_roles.settings');
  $result = $config->get('rules');

  // Determine which group-role-sync'd roles the user should have.
  // Assemble a  list of sync'd roles that the user currently has, in
  // $currentSyncedRoles and a list of sync'd roles that the user should have,
  // in $correctSyncedRoles.
  $allCurrentRoleIDs = $account->roles;
  $currentSyncedRoles = array();
  $correctSyncedRoles = array();

  foreach ($result as $group) {
    if (in_array($group['role_name'], $allCurrentRoleIDs)) {
      $currentSyncedRoles[] = $group['role_name'];
    }
    $params = array(
      'filter.group_id' => $group['group_id'],
      'id' => $contact,
      'version'  => 3,
    );
    $contacts = civicrm_api('contact', 'get', $params);
    // If we found a user
    if ($contacts['count'] > 0) {
      $debugging = $config->get('civicrm_group_roles_debugging');
      if ($debugging) {
        $message = 'Role @role should be held by user @user (@uid) because they are part of group @group (contactID: @cid)';
        $params = array(
          '@role' => $group['role_name'],
          '@user' => $account->name,
          '@uid' => $account->uid,
          '@group' => $group->group_id,
          '@cid' => $contact,
        );
        watchdog('civicrm_group_roles', $message, $params, WATCHDOG_INFO);
      }
      $correctSyncedRoles[] = $group['role_name'];
    }
  }

  $rolesToAdd    = array_diff($correctSyncedRoles, $currentSyncedRoles);
  $rolesToRemove = array_diff($currentSyncedRoles, $correctSyncedRoles);
  $finalRoles = array_merge($account->roles, $rolesToAdd);
  $finalRoles = array_diff($finalRoles, $rolesToRemove);
  $debugging = config_get('civicrm_group_roles.settings', 'civicrm_group_roles_debugging');
  if ($debugging) {
    $params = array(
      '@initial' => print_r($account->roles, TRUE),
      '@add' => print_r($rolesToAdd, TRUE),
      '@remove' => print_r($rolesToRemove, TRUE),
      '@final' => print_r($finalRoles, TRUE),
    );
    watchdog('civicrm_group_roles', 'Initial roles: @initial, roles to add: @add, roles to remove: @remove, final roles: @final', $params, WATCHDOG_INFO);
  }

  if ($account->roles !== $finalRoles) {
    $account->roles = $finalRoles;
    $account->save();
  }
}

/**
 * Settings form
 *
 * @ingroup forms
 */
function civicrm_group_roles_settings($form, &$form_state) {

  $form['#config'] = 'civicrm_group_roles.settings';
  $form['civicrm_group_roles_debugging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable detailed database logging'),
    '#default_value' => config_get('civicrm_group_roles.settings', 'civicrm_group_roles_debugging'),
    '#description' => 'Log the details of roles that are added and removed from users.',
  );

  // Default handler to save form configuration
  return system_settings_form($form);
}
